"use strict";
var wf4node = require("workflow-4-node");
var util = require("util");
var Composite = wf4node.activities.Composite;
var path = require("path");
var Collection = require("mongodb").Collection;
var debug = require("debug")("mongo-crunch:TempCollectionRef");
var uuid = require("node-uuid");
require("date-utils");
var config = require("../config");
function TempCollectionRef() {
  Composite.call(this);
  this.connection = "";
  this.indexes = null;
  this.name = null;
  this.ttl = config.defaultTTL;
}
util.inherits(TempCollectionRef, Composite);
TempCollectionRef.prototype.createImplementation = function() {
  return {
    "@require": path.join(__dirname, "collectionRef"),
    "@block": {
      tmpCR: "= this.$parent",
      args: [{"@collectionRef": {
          connection: "= this.tmpCR.collection",
          name: function() {
            var name = this.tmpCR.name;
            name = name ? ("~" + name + "_") : "~";
            name += uuid.v4();
            return name;
          },
          indexes: "= this.tmpCR.indexes",
          ttl: "= this.tmpCR.ttl",
          clearBeforeUse: true,
          deleteOnExit: true,
          mustExists: false
        }}]
    }
  };
};
module.exports = TempCollectionRef;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlbXBDb2xsZWN0aW9uUmVmLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBRUEsQUFBSSxFQUFBLENBQUEsT0FBTSxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsaUJBQWdCLENBQUMsQ0FBQztBQUN4QyxBQUFJLEVBQUEsQ0FBQSxJQUFHLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxNQUFLLENBQUMsQ0FBQztBQUMxQixBQUFJLEVBQUEsQ0FBQSxTQUFRLEVBQUksQ0FBQSxPQUFNLFdBQVcsVUFBVSxDQUFDO0FBQzVDLEFBQUksRUFBQSxDQUFBLElBQUcsRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLE1BQUssQ0FBQyxDQUFDO0FBQzFCLEFBQUksRUFBQSxDQUFBLFVBQVMsRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLFNBQVEsQ0FBQyxXQUFXLENBQUM7QUFDOUMsQUFBSSxFQUFBLENBQUEsS0FBSSxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsT0FBTSxDQUFDLEFBQUMsQ0FBQyxnQ0FBK0IsQ0FBQyxDQUFDO0FBQzlELEFBQUksRUFBQSxDQUFBLElBQUcsRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLFdBQVUsQ0FBQyxDQUFDO0FBQy9CLE1BQU0sQUFBQyxDQUFDLFlBQVcsQ0FBQyxDQUFDO0FBQ3JCLEFBQUksRUFBQSxDQUFBLE1BQUssRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLFdBQVUsQ0FBQyxDQUFDO0FBRWpDLE9BQVMsa0JBQWdCLENBQUUsQUFBRCxDQUFHO0FBQ3pCLFVBQVEsS0FBSyxBQUFDLENBQUMsSUFBRyxDQUFDLENBQUM7QUFFcEIsS0FBRyxXQUFXLEVBQUksR0FBQyxDQUFDO0FBQ3BCLEtBQUcsUUFBUSxFQUFJLEtBQUcsQ0FBQztBQUNuQixLQUFHLEtBQUssRUFBSSxLQUFHLENBQUM7QUFDaEIsS0FBRyxJQUFJLEVBQUksQ0FBQSxNQUFLLFdBQVcsQ0FBQztBQUNoQztBQUFBLEFBRUEsR0FBRyxTQUFTLEFBQUMsQ0FBQyxpQkFBZ0IsQ0FBRyxVQUFRLENBQUMsQ0FBQztBQUUzQyxnQkFBZ0IsVUFBVSxxQkFBcUIsRUFBSSxVQUFVLEFBQUQsQ0FBRztBQUMzRCxPQUFPO0FBQ0gsYUFBUyxDQUFHLENBQUEsSUFBRyxLQUFLLEFBQUMsQ0FBQyxTQUFRLENBQUcsZ0JBQWMsQ0FBQztBQUNoRCxXQUFPLENBQUc7QUFDTixVQUFJLENBQUcsaUJBQWU7QUFDdEIsU0FBRyxDQUFHLEVBQ0YsQ0FDSSxnQkFBZSxDQUFHO0FBQ2QsbUJBQVMsQ0FBRywwQkFBd0I7QUFDcEMsYUFBRyxDQUFHLFVBQVUsQUFBRCxDQUFHO0FBQ2QsQUFBSSxjQUFBLENBQUEsSUFBRyxFQUFJLENBQUEsSUFBRyxNQUFNLEtBQUssQ0FBQztBQUMxQixlQUFHLEVBQUksQ0FBQSxJQUFHLEVBQUksRUFBQyxHQUFFLEVBQUksS0FBRyxDQUFBLENBQUksSUFBRSxDQUFDLEVBQUksSUFBRSxDQUFDO0FBQ3RDLGVBQUcsR0FBSyxDQUFBLElBQUcsR0FBRyxBQUFDLEVBQUMsQ0FBQztBQUNqQixpQkFBTyxLQUFHLENBQUM7VUFDZjtBQUNBLGdCQUFNLENBQUcsdUJBQXFCO0FBQzlCLFlBQUUsQ0FBRyxtQkFBaUI7QUFDdEIsdUJBQWEsQ0FBRyxLQUFHO0FBQ25CLHFCQUFXLENBQUcsS0FBRztBQUNqQixtQkFBUyxDQUFHLE1BQUk7QUFBQSxRQUNwQixDQUNKLENBQ0o7QUFBQSxJQUNKO0FBQUEsRUFDSixDQUFDO0FBQ0wsQ0FBQztBQUVELEtBQUssUUFBUSxFQUFJLGtCQUFnQixDQUFDO0FBQUEiLCJmaWxlIjoiYWN0aXZpdGllcy90ZW1wQ29sbGVjdGlvblJlZi5qcyIsInNvdXJjZVJvb3QiOiJsaWIvZXM2Iiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5sZXQgd2Y0bm9kZSA9IHJlcXVpcmUoXCJ3b3JrZmxvdy00LW5vZGVcIik7XHJcbmxldCB1dGlsID0gcmVxdWlyZShcInV0aWxcIik7XHJcbmxldCBDb21wb3NpdGUgPSB3ZjRub2RlLmFjdGl2aXRpZXMuQ29tcG9zaXRlO1xyXG5sZXQgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xyXG5sZXQgQ29sbGVjdGlvbiA9IHJlcXVpcmUoXCJtb25nb2RiXCIpLkNvbGxlY3Rpb247XHJcbmxldCBkZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKShcIm1vbmdvLWNydW5jaDpUZW1wQ29sbGVjdGlvblJlZlwiKTtcclxubGV0IHV1aWQgPSByZXF1aXJlKFwibm9kZS11dWlkXCIpO1xyXG5yZXF1aXJlKFwiZGF0ZS11dGlsc1wiKTtcclxubGV0IGNvbmZpZyA9IHJlcXVpcmUoXCIuLi9jb25maWdcIik7XHJcblxyXG5mdW5jdGlvbiBUZW1wQ29sbGVjdGlvblJlZigpIHtcclxuICAgIENvbXBvc2l0ZS5jYWxsKHRoaXMpO1xyXG5cclxuICAgIHRoaXMuY29ubmVjdGlvbiA9IFwiXCI7XHJcbiAgICB0aGlzLmluZGV4ZXMgPSBudWxsO1xyXG4gICAgdGhpcy5uYW1lID0gbnVsbDtcclxuICAgIHRoaXMudHRsID0gY29uZmlnLmRlZmF1bHRUVEw7XHJcbn1cclxuXHJcbnV0aWwuaW5oZXJpdHMoVGVtcENvbGxlY3Rpb25SZWYsIENvbXBvc2l0ZSk7XHJcblxyXG5UZW1wQ29sbGVjdGlvblJlZi5wcm90b3R5cGUuY3JlYXRlSW1wbGVtZW50YXRpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIFwiQHJlcXVpcmVcIjogcGF0aC5qb2luKF9fZGlybmFtZSwgXCJjb2xsZWN0aW9uUmVmXCIpLFxyXG4gICAgICAgIFwiQGJsb2NrXCI6IHtcclxuICAgICAgICAgICAgdG1wQ1I6IFwiPSB0aGlzLiRwYXJlbnRcIixcclxuICAgICAgICAgICAgYXJnczogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIFwiQGNvbGxlY3Rpb25SZWZcIjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uOiBcIj0gdGhpcy50bXBDUi5jb2xsZWN0aW9uXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuYW1lID0gdGhpcy50bXBDUi5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSA9IG5hbWUgPyAoXCJ+XCIgKyBuYW1lICsgXCJfXCIpIDogXCJ+XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lICs9IHV1aWQudjQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleGVzOiBcIj0gdGhpcy50bXBDUi5pbmRleGVzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR0bDogXCI9IHRoaXMudG1wQ1IudHRsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyQmVmb3JlVXNlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGVPbkV4aXQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG11c3RFeGlzdHM6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gVGVtcENvbGxlY3Rpb25SZWY7Il19
