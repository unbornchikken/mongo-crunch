"use strict";
"use strict";
var Bluebird = require("bluebird");
var async = Bluebird.coroutine;
var misc = require("./misc");
var debug = require("debug")("mongo-crunch:collGC");
require("date-utils");
var rex = /@(\d\d\d\d)(\d\d)(\d\d)(\d\d)(\d\d)(\d\d)$/;
var collGC = {collect: async($traceurRuntime.initGeneratorFunction(function $__0(db) {
    return $traceurRuntime.createGeneratorInstance(function($ctx) {
      while (true)
        switch ($ctx.state) {
          case 0:
            $ctx.state = 2;
            return misc.deleteCollections(db, function(collName) {
              var result = rex.exec(collName);
              if (result) {
                var year = +result[1];
                var month = +result[2];
                var day = +result[3];
                var hour = +result[4];
                var minute = +result[5];
                var sec = +result[6];
                var ttlDate = new Date(Date.UTC(year, month, day, hour, minute, sec));
                var now = new Date();
                if (now.isAfter(ttlDate)) {
                  debug(("Deleting collection '" + collName + "' because its TTL " + ttlDate + " has been elapsed."));
                  return true;
                }
              }
              return false;
            });
          case 2:
            $ctx.maybeThrow();
            $ctx.state = -2;
            break;
          default:
            return $ctx.end();
        }
    }, $__0, this);
  }))};
module.exports = collGC;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbGxHQy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLFdBQVcsQ0FBQztBQUNaLEFBQUksRUFBQSxDQUFBLFFBQU8sRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLFVBQVMsQ0FBQyxDQUFDO0FBQ2xDLEFBQUksRUFBQSxDQUFBLEtBQUksRUFBSSxDQUFBLFFBQU8sVUFBVSxDQUFDO0FBQzlCLEFBQUksRUFBQSxDQUFBLElBQUcsRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLFFBQU8sQ0FBQyxDQUFDO0FBQzVCLEFBQUksRUFBQSxDQUFBLEtBQUksRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLE9BQU0sQ0FBQyxBQUFDLENBQUMscUJBQW9CLENBQUMsQ0FBQztBQUNuRCxNQUFNLEFBQUMsQ0FBQyxZQUFXLENBQUMsQ0FBQztBQUVyQixBQUFJLEVBQUEsQ0FBQSxHQUFFLEVBQUksNkNBQTJDLENBQUM7QUFFdEQsQUFBSSxFQUFBLENBQUEsTUFBSyxFQUFJLEVBQ1QsT0FBTSxDQUFHLENBQUEsS0FBSSxBQUFDLENBVmxCLGVBQWMsc0JBQXNCLEFBQUMsQ0FVbEIsY0FBVyxFQUFDO0FBVi9CLFNBQU8sQ0FBUCxlQUFjLHdCQUF3QixBQUFkLENBQXhCLFNBQVMsSUFBRyxDQUFHO0FBQ1QsWUFBTyxJQUFHOzs7O2lCQVVGLENBQUEsSUFBRyxrQkFBa0IsQUFBQyxDQUFDLEVBQUMsQ0FBRyxVQUFTLFFBQU8sQ0FBRztBQUNoRCxBQUFJLGdCQUFBLENBQUEsTUFBSyxFQUFJLENBQUEsR0FBRSxLQUFLLEFBQUMsQ0FBQyxRQUFPLENBQUMsQ0FBQztBQUMvQixpQkFBSSxNQUFLLENBQUc7QUFDUixBQUFJLGtCQUFBLENBQUEsSUFBRyxFQUFJLEVBQUMsTUFBSyxDQUFFLENBQUEsQ0FBQyxDQUFDO0FBQ3JCLEFBQUksa0JBQUEsQ0FBQSxLQUFJLEVBQUksRUFBQyxNQUFLLENBQUUsQ0FBQSxDQUFDLENBQUM7QUFDdEIsQUFBSSxrQkFBQSxDQUFBLEdBQUUsRUFBSSxFQUFDLE1BQUssQ0FBRSxDQUFBLENBQUMsQ0FBQztBQUNwQixBQUFJLGtCQUFBLENBQUEsSUFBRyxFQUFJLEVBQUMsTUFBSyxDQUFFLENBQUEsQ0FBQyxDQUFDO0FBQ3JCLEFBQUksa0JBQUEsQ0FBQSxNQUFLLEVBQUksRUFBQyxNQUFLLENBQUUsQ0FBQSxDQUFDLENBQUM7QUFDdkIsQUFBSSxrQkFBQSxDQUFBLEdBQUUsRUFBSSxFQUFDLE1BQUssQ0FBRSxDQUFBLENBQUMsQ0FBQztBQUNwQixBQUFJLGtCQUFBLENBQUEsT0FBTSxFQUFJLElBQUksS0FBRyxBQUFDLENBQUMsSUFBRyxJQUFJLEFBQUMsQ0FBQyxJQUFHLENBQUcsTUFBSSxDQUFHLElBQUUsQ0FBRyxLQUFHLENBQUcsT0FBSyxDQUFHLElBQUUsQ0FBQyxDQUFDLENBQUM7QUFDckUsQUFBSSxrQkFBQSxDQUFBLEdBQUUsRUFBSSxJQUFJLEtBQUcsQUFBQyxFQUFDLENBQUM7QUFDcEIsbUJBQUksR0FBRSxRQUFRLEFBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBRztBQUN0QixzQkFBSSxBQUFDLEVBQUMsdUJBQXVCLEVBQUMsU0FBTyxFQUFDLHFCQUFvQixFQUFDLFFBQU0sRUFBQyxxQkFBbUIsRUFBQyxDQUFDO0FBQ3ZGLHVCQUFPLEtBQUcsQ0FBQztnQkFDZjtBQUFBLGNBQ0o7QUFBQSxBQUNBLG1CQUFPLE1BQUksQ0FBQztZQUNoQixDQUFDOztBQTVCVCxlQUFHLFdBQVcsQUFBQyxFQUFDLENBQUE7Ozs7QUFBaEIsaUJBQU8sQ0FBQSxJQUFHLElBQUksQUFBQyxFQUFDLENBQUE7O0FBQ21CLElBQy9CLE9BQTZCLEtBQUcsQ0FBQyxDQUFDO0VBMkJsQyxDQTdCbUQsQ0E2QmxELENBQ0wsQ0FBQztBQUVELEtBQUssUUFBUSxFQUFJLE9BQUssQ0FBQztBQUFBIiwiZmlsZSI6ImFjdGl2aXRpZXMvY29sbEdDLmpzIiwic291cmNlUm9vdCI6ImxpYi9lczYiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxubGV0IEJsdWViaXJkID0gcmVxdWlyZShcImJsdWViaXJkXCIpO1xyXG5sZXQgYXN5bmMgPSBCbHVlYmlyZC5jb3JvdXRpbmU7XHJcbmxldCBtaXNjID0gcmVxdWlyZShcIi4vbWlzY1wiKTtcclxubGV0IGRlYnVnID0gcmVxdWlyZShcImRlYnVnXCIpKFwibW9uZ28tY3J1bmNoOmNvbGxHQ1wiKTtcclxucmVxdWlyZShcImRhdGUtdXRpbHNcIik7XHJcblxyXG5sZXQgcmV4ID0gL0AoXFxkXFxkXFxkXFxkKShcXGRcXGQpKFxcZFxcZCkoXFxkXFxkKShcXGRcXGQpKFxcZFxcZCkkLztcclxuXHJcbmxldCBjb2xsR0MgPSB7XHJcbiAgICBjb2xsZWN0OiBhc3luYyhmdW5jdGlvbiAqKGRiKSB7XHJcbiAgICAgICAgeWllbGQgbWlzYy5kZWxldGVDb2xsZWN0aW9ucyhkYiwgZnVuY3Rpb24oY29sbE5hbWUpIHtcclxuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IHJleC5leGVjKGNvbGxOYW1lKTtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHllYXIgPSArcmVzdWx0WzFdO1xyXG4gICAgICAgICAgICAgICAgbGV0IG1vbnRoID0gK3Jlc3VsdFsyXTtcclxuICAgICAgICAgICAgICAgIGxldCBkYXkgPSArcmVzdWx0WzNdO1xyXG4gICAgICAgICAgICAgICAgbGV0IGhvdXIgPSArcmVzdWx0WzRdO1xyXG4gICAgICAgICAgICAgICAgbGV0IG1pbnV0ZSA9ICtyZXN1bHRbNV07XHJcbiAgICAgICAgICAgICAgICBsZXQgc2VjID0gK3Jlc3VsdFs2XTtcclxuICAgICAgICAgICAgICAgIGxldCB0dGxEYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMoeWVhciwgbW9udGgsIGRheSwgaG91ciwgbWludXRlLCBzZWMpKTtcclxuICAgICAgICAgICAgICAgIGxldCBub3cgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5vdy5pc0FmdGVyKHR0bERhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVidWcoYERlbGV0aW5nIGNvbGxlY3Rpb24gJyR7Y29sbE5hbWV9JyBiZWNhdXNlIGl0cyBUVEwgJHt0dGxEYXRlfSBoYXMgYmVlbiBlbGFwc2VkLmApO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9KTtcclxuICAgIH0pXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGNvbGxHQzsiXX0=
