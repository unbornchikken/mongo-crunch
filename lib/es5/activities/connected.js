"use strict";
"use strict";
var wf4node = require("workflow-4-node");
var util = require("util");
var Activity = wf4node.activities.Activity;
var Db = require("mongodb").Db;
var debug = require("debug")("mongo-crunch:Connected");
function Connected() {
  Activity.call(this);
  this.connection = "";
  this.nonScopedProperties.add("getDb");
  this.nonScopedProperties.add("doWork");
}
util.inherits(Connected, Activity);
Connected.prototype.run = function(callContext, args) {
  callContext.schedule(this.connection, "_connectionGot");
};
Connected.prototype._connectionGot = function(callContext, reason, result) {
  if (reason !== Activity.states.complete) {
    callContext.end(reason, result);
    return;
  }
  this.connection = result;
  callContext.activity.doWork.call(this, callContext);
};
Connected.prototype.doWork = function(callContext) {
  callContext.fail(new Error("Not implemented."));
};
Connected.prototype.getDb = function(scope) {
  var connections = scope.connections;
  var connection = scope.connection || "default";
  debug(("Getting Db for connection: " + connection + "."));
  var result = connections[connection];
  if (!(result instanceof Db)) {
    throw new Error("MongoDB connection '" + connection + "' doesn't exists.");
  }
  debug(("Db '" + result.databaseName + "' found."));
  return result;
};
module.exports = Connected;
//# sourceMappingURL=data:application/json;base64,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ZVJvb3QiOiJsaWIvZXM2Iiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5sZXQgd2Y0bm9kZSA9IHJlcXVpcmUoXCJ3b3JrZmxvdy00LW5vZGVcIik7XHJcbmxldCB1dGlsID0gcmVxdWlyZShcInV0aWxcIik7XHJcbmxldCBBY3Rpdml0eSA9IHdmNG5vZGUuYWN0aXZpdGllcy5BY3Rpdml0eTtcclxubGV0IERiID0gcmVxdWlyZShcIm1vbmdvZGJcIikuRGI7XHJcbmxldCBkZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKShcIm1vbmdvLWNydW5jaDpDb25uZWN0ZWRcIik7XHJcblxyXG5mdW5jdGlvbiBDb25uZWN0ZWQoKSB7XHJcbiAgICBBY3Rpdml0eS5jYWxsKHRoaXMpO1xyXG5cclxuICAgIHRoaXMuY29ubmVjdGlvbiA9IFwiXCI7XHJcbiAgICB0aGlzLm5vblNjb3BlZFByb3BlcnRpZXMuYWRkKFwiZ2V0RGJcIik7XHJcbiAgICB0aGlzLm5vblNjb3BlZFByb3BlcnRpZXMuYWRkKFwiZG9Xb3JrXCIpO1xyXG59XHJcblxyXG51dGlsLmluaGVyaXRzKENvbm5lY3RlZCwgQWN0aXZpdHkpO1xyXG5cclxuQ29ubmVjdGVkLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbihjYWxsQ29udGV4dCwgYXJncykge1xyXG4gICAgY2FsbENvbnRleHQuc2NoZWR1bGUodGhpcy5jb25uZWN0aW9uLCBcIl9jb25uZWN0aW9uR290XCIpO1xyXG59O1xyXG5cclxuQ29ubmVjdGVkLnByb3RvdHlwZS5fY29ubmVjdGlvbkdvdCA9IGZ1bmN0aW9uKGNhbGxDb250ZXh0LCByZWFzb24sIHJlc3VsdCkge1xyXG4gICAgaWYgKHJlYXNvbiAhPT0gQWN0aXZpdHkuc3RhdGVzLmNvbXBsZXRlKSB7XHJcbiAgICAgICAgY2FsbENvbnRleHQuZW5kKHJlYXNvbiwgcmVzdWx0KTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5jb25uZWN0aW9uID0gcmVzdWx0O1xyXG4gICAgY2FsbENvbnRleHQuYWN0aXZpdHkuZG9Xb3JrLmNhbGwodGhpcywgY2FsbENvbnRleHQpO1xyXG59O1xyXG5cclxuQ29ubmVjdGVkLnByb3RvdHlwZS5kb1dvcmsgPSBmdW5jdGlvbihjYWxsQ29udGV4dCl7XHJcbiAgICBjYWxsQ29udGV4dC5mYWlsKG5ldyBFcnJvcihcIk5vdCBpbXBsZW1lbnRlZC5cIikpO1xyXG59O1xyXG5cclxuQ29ubmVjdGVkLnByb3RvdHlwZS5nZXREYiA9IGZ1bmN0aW9uIChzY29wZSkge1xyXG4gICAgbGV0IGNvbm5lY3Rpb25zID0gc2NvcGUuY29ubmVjdGlvbnM7XHJcbiAgICBsZXQgY29ubmVjdGlvbiA9IHNjb3BlLmNvbm5lY3Rpb24gfHwgXCJkZWZhdWx0XCI7XHJcblxyXG4gICAgZGVidWcoYEdldHRpbmcgRGIgZm9yIGNvbm5lY3Rpb246ICR7Y29ubmVjdGlvbn0uYCk7XHJcblxyXG4gICAgbGV0IHJlc3VsdCA9IGNvbm5lY3Rpb25zW2Nvbm5lY3Rpb25dO1xyXG4gICAgaWYgKCEocmVzdWx0IGluc3RhbmNlb2YgRGIpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTW9uZ29EQiBjb25uZWN0aW9uICdcIiArIGNvbm5lY3Rpb24gKyBcIicgZG9lc24ndCBleGlzdHMuXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGRlYnVnKGBEYiAnJHtyZXN1bHQuZGF0YWJhc2VOYW1lfScgZm91bmQuYCk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBDb25uZWN0ZWQ7XHJcbiJdfQ==
