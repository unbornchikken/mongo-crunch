"use strict";
"use strict";
var wf4node = require("workflow-4-node");
var CollectionOp = require("./collectionOp");
var util = require("util");
var Activity = wf4node.activities.Activity;
var _ = require("lodash");
var UnitOfWork = require("./unitOfWork");
var debug = require("debug")("mongo-crunch:Aggregate");
function Aggregate() {
  CollectionOp.call(this);
  this.pipeline = null;
  this.options = null;
  this.toArray = false;
}
util.inherits(Aggregate, CollectionOp);
Object.defineProperties(Aggregate.prototype, {collectionify: {
    value: true,
    enumerable: false
  }});
Aggregate.prototype.doWork = function(callContext) {
  callContext.schedule(this.pipeline, "_pipelineGot");
};
Aggregate.prototype._pipelineGot = function(callContext, reason, result) {
  if (reason === Activity.states.complete) {
    if (_.isPlainObject(result) || _.isArray(result)) {
      var coll = this.getCollection.call(this);
      var options = this.options || {};
      if (_.isUndefined(options.allowDiskUse)) {
        options.allowDiskUse = true;
      }
      debug("Executing aggregate:\n%j\noptions:\n%j", result, options);
      var cursor = coll.aggregate(result, options);
      if (this.toArray) {
        debug("Converting cursor to array.");
        cursor.toArray(function(err, _result) {
          if (err) {
            debug("toArray failed.");
            callContext.fail(err);
          } else {
            debug((_result.length + " documents got."));
            callContext.complete(_result);
          }
          cursor.close();
        });
      } else {
        debug("Registering cursor in the context.");
        UnitOfWork.registerOpenedCursor(this, cursor);
        callContext.complete(cursor);
      }
    } else {
      if (result) {
        callContext.fail(new Error("Aggregation pipeline expected."));
      } else {
        callContext.fail(new Error("Invalid aggregation pipeline:" + JSON.stringify(result)));
      }
    }
  } else {
    callContext.end(reason, result);
  }
};
module.exports = Aggregate;
//# sourceMappingURL=data:application/json;base64,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RSxDQUFDLENBQUM7VUFDekIsS0FDSztBQUNELGdCQUFJLEFBQUMsRUFBSSxPQUFNLE9BQU8sRUFBQyxrQkFBZ0IsRUFBQyxDQUFDO0FBQ3pDLHNCQUFVLFNBQVMsQUFBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDO1VBQ2pDO0FBQUEsQUFDQSxlQUFLLE1BQU0sQUFBQyxFQUFDLENBQUM7UUFDbEIsQ0FBQyxDQUFDO01BQ04sS0FDSztBQUNELFlBQUksQUFBQyxDQUFDLG9DQUFtQyxDQUFDLENBQUM7QUFDM0MsaUJBQVMscUJBQXFCLEFBQUMsQ0FBQyxJQUFHLENBQUcsT0FBSyxDQUFDLENBQUM7QUFDN0Msa0JBQVUsU0FBUyxBQUFDLENBQUMsTUFBSyxDQUFDLENBQUM7TUFDaEM7QUFBQSxJQUNKLEtBQ0s7QUFDRCxTQUFJLE1BQUssQ0FBRztBQUNSLGtCQUFVLEtBQUssQUFBQyxDQUFDLEdBQUksTUFBSSxBQUFDLENBQUMsZ0NBQStCLENBQUMsQ0FBQyxDQUFDO01BQ2pFLEtBQ0s7QUFDRCxrQkFBVSxLQUFLLEFBQUMsQ0FBQyxHQUFJLE1BQUksQUFBQyxDQUFDLCtCQUE4QixFQUFJLENBQUEsSUFBRyxVQUFVLEFBQUMsQ0FBQyxNQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7TUFDekY7QUFBQSxJQUNKO0FBQUEsRUFDSixLQUNLO0FBQ0QsY0FBVSxJQUFJLEFBQUMsQ0FBQyxNQUFLLENBQUcsT0FBSyxDQUFDLENBQUM7RUFDbkM7QUFBQSxBQUNKLENBQUM7QUFFRCxLQUFLLFFBQVEsRUFBSSxVQUFRLENBQUM7QUFDMUIiLCJmaWxlIjoiYWN0aXZpdGllcy9hZ2dyZWdhdGUuanMiLCJzb3VyY2VSb290IjoibGliL2VzNiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xubGV0IHdmNG5vZGUgPSByZXF1aXJlKFwid29ya2Zsb3ctNC1ub2RlXCIpO1xubGV0IENvbGxlY3Rpb25PcCA9IHJlcXVpcmUoXCIuL2NvbGxlY3Rpb25PcFwiKTtcbmxldCB1dGlsID0gcmVxdWlyZShcInV0aWxcIik7XG5sZXQgQWN0aXZpdHkgPSB3ZjRub2RlLmFjdGl2aXRpZXMuQWN0aXZpdHk7XG5sZXQgXyA9IHJlcXVpcmUoXCJsb2Rhc2hcIik7XG5sZXQgVW5pdE9mV29yayA9IHJlcXVpcmUoXCIuL3VuaXRPZldvcmtcIik7XG5sZXQgZGVidWcgPSByZXF1aXJlKFwiZGVidWdcIikoXCJtb25nby1jcnVuY2g6QWdncmVnYXRlXCIpO1xuXG5mdW5jdGlvbiBBZ2dyZWdhdGUoKSB7XG4gICAgQ29sbGVjdGlvbk9wLmNhbGwodGhpcyk7XG4gICAgdGhpcy5waXBlbGluZSA9IG51bGw7XG4gICAgdGhpcy5vcHRpb25zID0gbnVsbDtcbiAgICB0aGlzLnRvQXJyYXkgPSBmYWxzZTtcbn1cblxudXRpbC5pbmhlcml0cyhBZ2dyZWdhdGUsIENvbGxlY3Rpb25PcCk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEFnZ3JlZ2F0ZS5wcm90b3R5cGUsIHtcbiAgICBjb2xsZWN0aW9uaWZ5OiB7XG4gICAgICAgIHZhbHVlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICAgIH1cbn0pO1xuXG5BZ2dyZWdhdGUucHJvdG90eXBlLmRvV29yayA9IGZ1bmN0aW9uIChjYWxsQ29udGV4dCkge1xuICAgIGNhbGxDb250ZXh0LnNjaGVkdWxlKHRoaXMucGlwZWxpbmUsIFwiX3BpcGVsaW5lR290XCIpO1xufTtcblxuQWdncmVnYXRlLnByb3RvdHlwZS5fcGlwZWxpbmVHb3QgPSBmdW5jdGlvbiAoY2FsbENvbnRleHQsIHJlYXNvbiwgcmVzdWx0KSB7XG4gICAgaWYgKHJlYXNvbiA9PT0gQWN0aXZpdHkuc3RhdGVzLmNvbXBsZXRlKSB7XG4gICAgICAgIGlmIChfLmlzUGxhaW5PYmplY3QocmVzdWx0KSB8fCBfLmlzQXJyYXkocmVzdWx0KSkge1xuICAgICAgICAgICAgbGV0IGNvbGwgPSB0aGlzLmdldENvbGxlY3Rpb24uY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIGxldCBvcHRpb25zID0gdGhpcy5vcHRpb25zIHx8IHt9O1xuICAgICAgICAgICAgaWYgKF8uaXNVbmRlZmluZWQob3B0aW9ucy5hbGxvd0Rpc2tVc2UpKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5hbGxvd0Rpc2tVc2UgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVidWcoYEV4ZWN1dGluZyBhZ2dyZWdhdGU6XFxuJWpcXG5vcHRpb25zOlxcbiVqYCwgcmVzdWx0LCBvcHRpb25zKTtcbiAgICAgICAgICAgIGxldCBjdXJzb3IgPSBjb2xsLmFnZ3JlZ2F0ZShyZXN1bHQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgaWYgKHRoaXMudG9BcnJheSkge1xuICAgICAgICAgICAgICAgIGRlYnVnKFwiQ29udmVydGluZyBjdXJzb3IgdG8gYXJyYXkuXCIpO1xuICAgICAgICAgICAgICAgIGN1cnNvci50b0FycmF5KGZ1bmN0aW9uIChlcnIsIF9yZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVidWcoXCJ0b0FycmF5IGZhaWxlZC5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsQ29udGV4dC5mYWlsKGVycik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1ZyhgJHtfcmVzdWx0Lmxlbmd0aH0gZG9jdW1lbnRzIGdvdC5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxDb250ZXh0LmNvbXBsZXRlKF9yZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGN1cnNvci5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVidWcoYFJlZ2lzdGVyaW5nIGN1cnNvciBpbiB0aGUgY29udGV4dC5gKTtcbiAgICAgICAgICAgICAgICBVbml0T2ZXb3JrLnJlZ2lzdGVyT3BlbmVkQ3Vyc29yKHRoaXMsIGN1cnNvcik7XG4gICAgICAgICAgICAgICAgY2FsbENvbnRleHQuY29tcGxldGUoY3Vyc29yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBjYWxsQ29udGV4dC5mYWlsKG5ldyBFcnJvcihcIkFnZ3JlZ2F0aW9uIHBpcGVsaW5lIGV4cGVjdGVkLlwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjYWxsQ29udGV4dC5mYWlsKG5ldyBFcnJvcihcIkludmFsaWQgYWdncmVnYXRpb24gcGlwZWxpbmU6XCIgKyBKU09OLnN0cmluZ2lmeShyZXN1bHQpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNhbGxDb250ZXh0LmVuZChyZWFzb24sIHJlc3VsdCk7XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBZ2dyZWdhdGU7XG4iXX0=
