"use strict";
"use strict";
var wf4node = require("../../../deps/workflow-4-node");
var CollectionOp = require('./collectionOp');
var util = require('util');
var Activity = wf4node.activities.Activity;
var _ = require('lodash');
var MongoDBContext = require('./mongoDBContext');
function Aggregate() {
  CollectionOp.call(this);
  this.pipeline = null;
  this.options = null;
  this.toArray = false;
}
util.inherits(Aggregate, CollectionOp);
Aggregate.prototype.doWork = function(callContext) {
  callContext.schedule(this.get('pipeline'), '_pipelineGot');
};
Aggregate.prototype._pipelineGot = function(callContext, reason, result) {
  if (result === Activity.states.complete) {
    if (_.isPlainObject(result) || _.isArray(result)) {
      var coll = callContext.activity.getCollection(this);
      var cursor = coll.aggregate(result, this.get("options"));
      if (this.get("toArray")) {
        cursor.toArray(function(err, result) {
          if (err) {
            callContext.fail(err);
          } else {
            callContext.complete(result);
          }
          cursor.close();
        });
      } else {
        MongoDBContext.registerOpenedCursor(this, cursor);
        callContext.complete(cursor);
      }
    } else {
      if (result)
        callContext.fail(new Error("Aggregation pipeline expected."));
      else
        callContext.fail(new Error("Invalid aggregation pipeline:" + JSON.stringify(result)));
    }
  } else {
    callContext.end(reason, result);
  }
};
module.exports = Aggregate;
//# sourceMappingURL=data:application/json;base64,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QUMsQ0FBQyxDQUFDO0FBQUEsSUFDN0Y7QUFBQSxFQUNILEtBQ0s7QUFDRCxjQUFVLElBQUksQUFBQyxDQUFDLE1BQUssQ0FBRyxPQUFLLENBQUMsQ0FBQztFQUNuQztBQUFBLEFBQ0osQ0FBQTtBQUVBLEtBQUssUUFBUSxFQUFJLFVBQVEsQ0FBQztBQUMxQiIsImZpbGUiOiJhY3Rpdml0aWVzL2FnZ3JlZ2F0ZS5qcyIsInNvdXJjZVJvb3QiOiJsaWIvZXM2Iiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbmxldCB3ZjRub2RlID0gcmVxdWlyZShcIi4uLy4uLy4uL2RlcHMvd29ya2Zsb3ctNC1ub2RlXCIpO1xyXG5sZXQgQ29sbGVjdGlvbk9wID0gcmVxdWlyZSgnLi9jb2xsZWN0aW9uT3AnKTtcclxubGV0IHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XHJcbmxldCBBY3Rpdml0eSA9IHdmNG5vZGUuYWN0aXZpdGllcy5BY3Rpdml0eTtcclxubGV0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcclxubGV0IE1vbmdvREJDb250ZXh0ID0gcmVxdWlyZSgnLi9tb25nb0RCQ29udGV4dCcpO1xyXG5cclxuZnVuY3Rpb24gQWdncmVnYXRlKCkge1xyXG4gICAgQ29sbGVjdGlvbk9wLmNhbGwodGhpcyk7XHJcbiAgICB0aGlzLnBpcGVsaW5lID0gbnVsbDtcclxuICAgIHRoaXMub3B0aW9ucyA9IG51bGw7XHJcbiAgICB0aGlzLnRvQXJyYXkgPSBmYWxzZTtcclxufVxyXG5cclxudXRpbC5pbmhlcml0cyhBZ2dyZWdhdGUsIENvbGxlY3Rpb25PcCk7XHJcblxyXG5BZ2dyZWdhdGUucHJvdG90eXBlLmRvV29yayA9IGZ1bmN0aW9uIChjYWxsQ29udGV4dCkge1xyXG4gICAgY2FsbENvbnRleHQuc2NoZWR1bGUodGhpcy5nZXQoJ3BpcGVsaW5lJyksICdfcGlwZWxpbmVHb3QnKTtcclxufTtcclxuXHJcbkFnZ3JlZ2F0ZS5wcm90b3R5cGUuX3BpcGVsaW5lR290ID0gZnVuY3Rpb24gKGNhbGxDb250ZXh0LCByZWFzb24sIHJlc3VsdCkge1xyXG4gICAgaWYgKHJlc3VsdCA9PT0gQWN0aXZpdHkuc3RhdGVzLmNvbXBsZXRlKSB7XHJcbiAgICAgICBpZiAoXy5pc1BsYWluT2JqZWN0KHJlc3VsdCkgfHwgXy5pc0FycmF5KHJlc3VsdCkpIHtcclxuICAgICAgICAgICBsZXQgY29sbCA9IGNhbGxDb250ZXh0LmFjdGl2aXR5LmdldENvbGxlY3Rpb24odGhpcyk7XHJcbiAgICAgICAgICAgbGV0IGN1cnNvciA9IGNvbGwuYWdncmVnYXRlKHJlc3VsdCwgdGhpcy5nZXQoXCJvcHRpb25zXCIpKTtcclxuICAgICAgICAgICBpZiAodGhpcy5nZXQoXCJ0b0FycmF5XCIpKSB7XHJcbiAgICAgICAgICAgICAgIGN1cnNvci50b0FycmF5KGZ1bmN0aW9uKGVyciwgcmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgY2FsbENvbnRleHQuZmFpbChlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgY2FsbENvbnRleHQuY29tcGxldGUocmVzdWx0KTtcclxuICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgIGN1cnNvci5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICB9XHJcbiAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgIE1vbmdvREJDb250ZXh0LnJlZ2lzdGVyT3BlbmVkQ3Vyc29yKHRoaXMsIGN1cnNvcik7XHJcbiAgICAgICAgICAgICAgIGNhbGxDb250ZXh0LmNvbXBsZXRlKGN1cnNvcik7XHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgfVxyXG4gICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgaWYgKHJlc3VsdClcclxuICAgICAgICAgICAgY2FsbENvbnRleHQuZmFpbChuZXcgRXJyb3IoXCJBZ2dyZWdhdGlvbiBwaXBlbGluZSBleHBlY3RlZC5cIikpO1xyXG4gICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgY2FsbENvbnRleHQuZmFpbChuZXcgRXJyb3IoXCJJbnZhbGlkIGFnZ3JlZ2F0aW9uIHBpcGVsaW5lOlwiICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0KSkpO1xyXG4gICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY2FsbENvbnRleHQuZW5kKHJlYXNvbiwgcmVzdWx0KTtcclxuICAgIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBBZ2dyZWdhdGU7XHJcbiJdfQ==
