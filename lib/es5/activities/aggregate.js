"use strict";
var wf4node = require("workflow-4-node");
var CollectionOp = require("./collectionOp");
var util = require("util");
var Activity = wf4node.activities.Activity;
var _ = require("lodash");
var UnitOfWork = require("./unitOfWork");
var debug = require("debug")("mongo-crunch:Aggregate");
function Aggregate() {
  CollectionOp.call(this);
  this.pipeline = null;
  this.options = null;
  this.toArray = false;
}
util.inherits(Aggregate, CollectionOp);
Object.defineProperties(Aggregate.prototype, {collectionify: {
    value: true,
    enumerable: false
  }});
Aggregate.prototype.doWork = function(callContext) {
  callContext.schedule(this.pipeline, "_pipelineGot");
};
Aggregate.prototype._pipelineGot = function(callContext, reason, result) {
  if (reason === Activity.states.complete) {
    if (_.isPlainObject(result) || _.isArray(result)) {
      var coll = this.getCollection.call(this);
      var options = this.options || {};
      if (_.isUndefined(options.allowDiskUse)) {
        options.allowDiskUse = true;
      }
      debug("Executing aggregate:\n%j\noptions:\n%j", result, options);
      var cursor = coll.aggregate(result, options);
      if (this.toArray) {
        debug("Converting cursor to array.");
        cursor.toArray(function(err, _result) {
          if (err) {
            debug("toArray failed.");
            callContext.fail(err);
          } else {
            debug((_result.length + " documents got."));
            callContext.complete(_result);
          }
          cursor.close();
        });
      } else {
        debug("Registering cursor in the context.");
        UnitOfWork.registerOpenedCursor(this, cursor);
        callContext.complete(cursor);
      }
    } else {
      if (result) {
        callContext.fail(new Error("Aggregation pipeline expected."));
      } else {
        callContext.fail(new Error("Invalid aggregation pipeline:" + JSON.stringify(result)));
      }
    }
  } else {
    callContext.end(reason, result);
  }
};
module.exports = Aggregate;
//# sourceMappingURL=data:application/json;base64,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ekIsS0FDSztBQUNELGdCQUFJLEFBQUMsRUFBSSxPQUFNLE9BQU8sRUFBQyxrQkFBZ0IsRUFBQyxDQUFDO0FBQ3pDLHNCQUFVLFNBQVMsQUFBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDO1VBQ2pDO0FBQUEsQUFDQSxlQUFLLE1BQU0sQUFBQyxFQUFDLENBQUM7UUFDbEIsQ0FBQyxDQUFDO01BQ04sS0FDSztBQUNELFlBQUksQUFBQyxDQUFDLG9DQUFtQyxDQUFDLENBQUM7QUFDM0MsaUJBQVMscUJBQXFCLEFBQUMsQ0FBQyxJQUFHLENBQUcsT0FBSyxDQUFDLENBQUM7QUFDN0Msa0JBQVUsU0FBUyxBQUFDLENBQUMsTUFBSyxDQUFDLENBQUM7TUFDaEM7QUFBQSxJQUNKLEtBQ0s7QUFDRCxTQUFJLE1BQUssQ0FBRztBQUNSLGtCQUFVLEtBQUssQUFBQyxDQUFDLEdBQUksTUFBSSxBQUFDLENBQUMsZ0NBQStCLENBQUMsQ0FBQyxDQUFDO01BQ2pFLEtBQ0s7QUFDRCxrQkFBVSxLQUFLLEFBQUMsQ0FBQyxHQUFJLE1BQUksQUFBQyxDQUFDLCtCQUE4QixFQUFJLENBQUEsSUFBRyxVQUFVLEFBQUMsQ0FBQyxNQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7TUFDekY7QUFBQSxJQUNKO0FBQUEsRUFDSixLQUNLO0FBQ0QsY0FBVSxJQUFJLEFBQUMsQ0FBQyxNQUFLLENBQUcsT0FBSyxDQUFDLENBQUM7RUFDbkM7QUFBQSxBQUNKLENBQUM7QUFFRCxLQUFLLFFBQVEsRUFBSSxVQUFRLENBQUM7QUFDMUIiLCJmaWxlIjoiYWN0aXZpdGllcy9hZ2dyZWdhdGUuanMiLCJzb3VyY2VSb290IjoibGliL2VzNiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5sZXQgd2Y0bm9kZSA9IHJlcXVpcmUoXCJ3b3JrZmxvdy00LW5vZGVcIik7XHJcbmxldCBDb2xsZWN0aW9uT3AgPSByZXF1aXJlKFwiLi9jb2xsZWN0aW9uT3BcIik7XHJcbmxldCB1dGlsID0gcmVxdWlyZShcInV0aWxcIik7XHJcbmxldCBBY3Rpdml0eSA9IHdmNG5vZGUuYWN0aXZpdGllcy5BY3Rpdml0eTtcclxubGV0IF8gPSByZXF1aXJlKFwibG9kYXNoXCIpO1xyXG5sZXQgVW5pdE9mV29yayA9IHJlcXVpcmUoXCIuL3VuaXRPZldvcmtcIik7XHJcbmxldCBkZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKShcIm1vbmdvLWNydW5jaDpBZ2dyZWdhdGVcIik7XHJcblxyXG5mdW5jdGlvbiBBZ2dyZWdhdGUoKSB7XHJcbiAgICBDb2xsZWN0aW9uT3AuY2FsbCh0aGlzKTtcclxuICAgIHRoaXMucGlwZWxpbmUgPSBudWxsO1xyXG4gICAgdGhpcy5vcHRpb25zID0gbnVsbDtcclxuICAgIHRoaXMudG9BcnJheSA9IGZhbHNlO1xyXG59XHJcblxyXG51dGlsLmluaGVyaXRzKEFnZ3JlZ2F0ZSwgQ29sbGVjdGlvbk9wKTtcclxuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEFnZ3JlZ2F0ZS5wcm90b3R5cGUsIHtcclxuICAgIGNvbGxlY3Rpb25pZnk6IHtcclxuICAgICAgICB2YWx1ZTogdHJ1ZSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZVxyXG4gICAgfVxyXG59KTtcclxuXHJcbkFnZ3JlZ2F0ZS5wcm90b3R5cGUuZG9Xb3JrID0gZnVuY3Rpb24gKGNhbGxDb250ZXh0KSB7XHJcbiAgICBjYWxsQ29udGV4dC5zY2hlZHVsZSh0aGlzLnBpcGVsaW5lLCBcIl9waXBlbGluZUdvdFwiKTtcclxufTtcclxuXHJcbkFnZ3JlZ2F0ZS5wcm90b3R5cGUuX3BpcGVsaW5lR290ID0gZnVuY3Rpb24gKGNhbGxDb250ZXh0LCByZWFzb24sIHJlc3VsdCkge1xyXG4gICAgaWYgKHJlYXNvbiA9PT0gQWN0aXZpdHkuc3RhdGVzLmNvbXBsZXRlKSB7XHJcbiAgICAgICAgaWYgKF8uaXNQbGFpbk9iamVjdChyZXN1bHQpIHx8IF8uaXNBcnJheShyZXN1bHQpKSB7XHJcbiAgICAgICAgICAgIGxldCBjb2xsID0gdGhpcy5nZXRDb2xsZWN0aW9uLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgIGxldCBvcHRpb25zID0gdGhpcy5vcHRpb25zIHx8IHt9O1xyXG4gICAgICAgICAgICBpZiAoXy5pc1VuZGVmaW5lZChvcHRpb25zLmFsbG93RGlza1VzZSkpIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuYWxsb3dEaXNrVXNlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkZWJ1ZyhgRXhlY3V0aW5nIGFnZ3JlZ2F0ZTpcXG4lalxcbm9wdGlvbnM6XFxuJWpgLCByZXN1bHQsIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICBsZXQgY3Vyc29yID0gY29sbC5hZ2dyZWdhdGUocmVzdWx0LCBvcHRpb25zKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMudG9BcnJheSkge1xyXG4gICAgICAgICAgICAgICAgZGVidWcoXCJDb252ZXJ0aW5nIGN1cnNvciB0byBhcnJheS5cIik7XHJcbiAgICAgICAgICAgICAgICBjdXJzb3IudG9BcnJheShmdW5jdGlvbiAoZXJyLCBfcmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1ZyhcInRvQXJyYXkgZmFpbGVkLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbENvbnRleHQuZmFpbChlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVidWcoYCR7X3Jlc3VsdC5sZW5ndGh9IGRvY3VtZW50cyBnb3QuYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxDb250ZXh0LmNvbXBsZXRlKF9yZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjdXJzb3IuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZGVidWcoYFJlZ2lzdGVyaW5nIGN1cnNvciBpbiB0aGUgY29udGV4dC5gKTtcclxuICAgICAgICAgICAgICAgIFVuaXRPZldvcmsucmVnaXN0ZXJPcGVuZWRDdXJzb3IodGhpcywgY3Vyc29yKTtcclxuICAgICAgICAgICAgICAgIGNhbGxDb250ZXh0LmNvbXBsZXRlKGN1cnNvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxDb250ZXh0LmZhaWwobmV3IEVycm9yKFwiQWdncmVnYXRpb24gcGlwZWxpbmUgZXhwZWN0ZWQuXCIpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNhbGxDb250ZXh0LmZhaWwobmV3IEVycm9yKFwiSW52YWxpZCBhZ2dyZWdhdGlvbiBwaXBlbGluZTpcIiArIEpTT04uc3RyaW5naWZ5KHJlc3VsdCkpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGNhbGxDb250ZXh0LmVuZChyZWFzb24sIHJlc3VsdCk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEFnZ3JlZ2F0ZTtcclxuIl19
