"use strict";
var wf4node = require("workflow-4-node");
var util = require("util");
var Activity = wf4node.activities.Activity;
var Bluebird = require("bluebird");
var UnitOfWork = require("./unitOfWork");
var _ = require("lodash");
var Connected = require("./connected");
var debug = require("debug")("mongo-crunch:CollectionRef");
var async = Bluebird.coroutine;
require("date-utils");
function CollectionRef() {
  Connected.call(this);
  this.name = null;
  this.mustExists = true;
  this.deleteOnExit = false;
  this.clearBeforeUse = false;
  this.options = null;
  this.indexes = null;
  this.ttl = null;
  this.nonScopedProperties.add("_generateName");
}
util.inherits(CollectionRef, Connected);
CollectionRef.prototype._generateName = function(name, ttl) {
  if (ttl && ttl > 0) {
    var to = new Date();
    to.addMinutes(ttl);
    name += "@" + to.toUTCFormat("YYYYMMDDHHMISS");
  }
  return name;
};
CollectionRef.prototype.doWork = function(callContext) {
  callContext.schedule([this.name, this.mustExists, this.deleteOnExit, this.clearBeforeUse, this.options, this.indexes, this.ttl], "_varsGot");
};
CollectionRef.prototype._varsGot = function(callContext, reason, result) {
  if (reason !== Activity.states.complete) {
    callContext.end(reason, result);
    return;
  }
  var self = this;
  var ttl = result[6];
  var name = callContext.activity._generateName(result[0], ttl);
  var mustExists = result[1];
  var deleteOnExit = result[2];
  var clearBeforeUse = result[3];
  var options = result[4];
  var indexes = result[5];
  debug((name + " running, mustExists: " + mustExists + ", deleteOnExit: " + deleteOnExit + ", clearBeforeUse: " + clearBeforeUse));
  debug(("options: " + util.inspect(options)));
  debug(("indexes: " + util.inspect(indexes)));
  if (!_.isString(name) || !name) {
    callContext.fail(new Error("Activity argument \"name\" is null or empty."));
    return;
  }
  function getIndexes() {
    function toIndex(idx) {
      var idxName = idx.name;
      var fieldOrSpec = idx.fieldOrSpec;
      var idxOptions = idx.options || {w: "majority"};
      if (!_.isString(idxName) || !fieldOrSpec) {
        throw new Error("Invalid index specification: " + JSON.stringify(idx));
      }
      return {
        name: idxName,
        fieldOrSpec: fieldOrSpec,
        options: idxOptions
      };
    }
    var r = [];
    if (_.isArray(indexes)) {
      var $__4 = true;
      var $__5 = false;
      var $__6 = undefined;
      try {
        for (var $__2 = void 0,
            $__1 = (indexes)[Symbol.iterator](); !($__4 = ($__2 = $__1.next()).done); $__4 = true) {
          var idx = $__2.value;
          {
            r.push(toIndex(idx));
          }
        }
      } catch ($__7) {
        $__5 = true;
        $__6 = $__7;
      } finally {
        try {
          if (!$__4 && $__1.return != null) {
            $__1.return();
          }
        } finally {
          if ($__5) {
            throw $__6;
          }
        }
      }
    } else if (_.isPlainObject(indexes)) {
      r.push(toIndex(indexes));
    }
    return r;
  }
  async($traceurRuntime.initGeneratorFunction(function $__8() {
    var db,
        firstSeen,
        dropped,
        opts,
        coll,
        indexDefs,
        i,
        indexDef,
        e;
    return $traceurRuntime.createGeneratorInstance(function($ctx) {
      while (true)
        switch ($ctx.state) {
          case 0:
            $ctx.pushTry(55, null);
            $ctx.state = 58;
            break;
          case 58:
            db = callContext.activity.getDb(self);
            firstSeen = UnitOfWork.isFirstSeenCollection(self, db, name);
            dropped = false;
            $ctx.state = 50;
            break;
          case 50:
            $ctx.state = (deleteOnExit && firstSeen && !mustExists) ? 16 : 19;
            break;
          case 16:
            debug(("'" + name + "' is a temporary collection that must dropped on exit. Dropping."));
            $ctx.state = 17;
            break;
          case 17:
            $ctx.pushTry(7, null);
            $ctx.state = 10;
            break;
          case 10:
            $ctx.state = 2;
            return db.dropCollection(name);
          case 2:
            $ctx.maybeThrow();
            $ctx.state = 4;
            break;
          case 4:
            debug(("'" + name + "' dropped"));
            $ctx.state = 6;
            break;
          case 6:
            $ctx.popTry();
            $ctx.state = 12;
            break;
          case 7:
            $ctx.popTry();
            $ctx.maybeUncatchable();
            e = $ctx.storedException;
            $ctx.state = 13;
            break;
          case 13:
            if (!((e.name === "MongoError" && e.message === "ns not found"))) {
              throw e;
            }
            debug(("'" + name + "' doesn't exists when referenced first."));
            $ctx.state = 12;
            break;
          case 12:
            dropped = true;
            $ctx.state = 19;
            break;
          case 19:
            opts = _.isObject(options) ? _.clone(options) : {w: "majority"};
            if (mustExists) {
              debug("Adding strict option.");
              opts.strict = true;
            }
            debug(("Getting '" + name + "' collection's reference from Db."));
            $ctx.state = 52;
            break;
          case 52:
            $ctx.state = 22;
            return Bluebird.promisify(db.collection, {context: db})(name, opts);
          case 22:
            coll = $ctx.sent;
            $ctx.state = 24;
            break;
          case 24:
            $ctx.state = (firstSeen) ? 37 : 40;
            break;
          case 37:
            indexDefs = getIndexes();
            $ctx.state = 38;
            break;
          case 38:
            $ctx.state = (indexDefs.length) ? 34 : 31;
            break;
          case 34:
            debug(("Ensuring " + indexDefs.length + " indexes."));
            $ctx.state = 35;
            break;
          case 35:
            i = 0;
            $ctx.state = 33;
            break;
          case 33:
            $ctx.state = (i < indexDefs.length) ? 29 : 31;
            break;
          case 28:
            i++;
            $ctx.state = 33;
            break;
          case 29:
            indexDef = indexDefs[i];
            debug(("Ensuring index " + util.inspect(indexDef)));
            $ctx.state = 30;
            break;
          case 30:
            $ctx.state = 26;
            return coll.ensureIndex(indexDef.name, indexDef.fieldOrSpec, indexDef.options);
          case 26:
            $ctx.maybeThrow();
            $ctx.state = 28;
            break;
          case 31:
            if (deleteOnExit) {
              UnitOfWork.addCollectionToRecycleBin(self, coll);
            }
            $ctx.state = 40;
            break;
          case 40:
            $ctx.state = (clearBeforeUse && !dropped) ? 46 : 45;
            break;
          case 46:
            debug(("Calling 'deleteMany' in collection '" + name + "' because 'clearBeforeUse' option is set."));
            $ctx.state = 47;
            break;
          case 47:
            $ctx.state = 43;
            return coll.deleteMany({}, {w: "majority"});
          case 43:
            $ctx.maybeThrow();
            $ctx.state = 45;
            break;
          case 45:
            debug(("CollectionRef '" + name + "' run completed."));
            callContext.complete(coll);
            $ctx.state = 54;
            break;
          case 54:
            $ctx.popTry();
            $ctx.state = -2;
            break;
          case 55:
            $ctx.popTry();
            $ctx.maybeUncatchable();
            e = $ctx.storedException;
            $ctx.state = 61;
            break;
          case 61:
            callContext.fail(e);
            $ctx.state = -2;
            break;
          default:
            return $ctx.end();
        }
    }, $__8, this);
  }))();
};
module.exports = CollectionRef;
//# sourceMappingURL=data:application/json;base64,
