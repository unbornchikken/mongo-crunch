"use strict";
"use strict";
var util = require("util");
var Query = require("./query");
var UnitOfWork = require("./unitOfWork");
var debug = require("debug")("mongo-crunch:Find");
function Find() {
  Query.call(this);
  this.toArray = false;
}
util.inherits(Find, Query);
Find.prototype.doQuery = function(callContext, query, options) {
  var coll = this.getCollection.call(this);
  query = query || {};
  debug(("Creating cursor for query:\n" + util.inspect(query) + "\noptions:\n" + util.inspect(options)));
  var cursor = coll.find(query, options);
  if (this.toArray) {
    debug("Converting cursor to array.");
    cursor.toArray(function(err, result) {
      if (err) {
        callContext.fail(err);
      } else {
        debug(("Result documents count: " + result.length));
        callContext.complete(result);
      }
      cursor.close();
    });
  } else {
    debug("Registering cursor in context.");
    UnitOfWork.registerOpenedCursor(this, cursor);
    callContext.complete(cursor);
  }
};
module.exports = Find;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbmQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxXQUFXLENBQUM7QUFFWixBQUFJLEVBQUEsQ0FBQSxJQUFHLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxNQUFLLENBQUMsQ0FBQztBQUMxQixBQUFJLEVBQUEsQ0FBQSxLQUFJLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxTQUFRLENBQUMsQ0FBQztBQUM5QixBQUFJLEVBQUEsQ0FBQSxVQUFTLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxjQUFhLENBQUMsQ0FBQztBQUN4QyxBQUFJLEVBQUEsQ0FBQSxLQUFJLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxPQUFNLENBQUMsQUFBQyxDQUFDLG1CQUFrQixDQUFDLENBQUM7QUFFakQsT0FBUyxLQUFHLENBQUUsQUFBRCxDQUFHO0FBQ1osTUFBSSxLQUFLLEFBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQztBQUVoQixLQUFHLFFBQVEsRUFBSSxNQUFJLENBQUM7QUFDeEI7QUFBQSxBQUVBLEdBQUcsU0FBUyxBQUFDLENBQUMsSUFBRyxDQUFHLE1BQUksQ0FBQyxDQUFDO0FBRTFCLEdBQUcsVUFBVSxRQUFRLEVBQUksVUFBUyxXQUFVLENBQUcsQ0FBQSxLQUFJLENBQUcsQ0FBQSxPQUFNLENBQUc7QUFDM0QsQUFBSSxJQUFBLENBQUEsSUFBRyxFQUFJLENBQUEsSUFBRyxjQUFjLEtBQUssQUFBQyxDQUFDLElBQUcsQ0FBQyxDQUFDO0FBQ3hDLE1BQUksRUFBSSxDQUFBLEtBQUksR0FBSyxHQUFDLENBQUM7QUFDbkIsTUFBSSxBQUFDLEVBQUMsOEJBQThCLEVBQUMsQ0FBQSxJQUFHLFFBQVEsQUFBQyxDQUFDLEtBQUksQ0FBQyxDQUFBLENBQUMsZUFBYyxFQUFDLENBQUEsSUFBRyxRQUFRLEFBQUMsQ0FBQyxPQUFNLENBQUMsRUFBRyxDQUFDO0FBQy9GLEFBQUksSUFBQSxDQUFBLE1BQUssRUFBSSxDQUFBLElBQUcsS0FBSyxBQUFDLENBQUMsS0FBSSxDQUFHLFFBQU0sQ0FBQyxDQUFDO0FBQ3RDLEtBQUksSUFBRyxRQUFRLENBQUc7QUFDZCxRQUFJLEFBQUMsQ0FBQyw2QkFBNEIsQ0FBQyxDQUFDO0FBQ3BDLFNBQUssUUFBUSxBQUFDLENBQUMsU0FBUyxHQUFFLENBQUcsQ0FBQSxNQUFLLENBQUc7QUFDakMsU0FBSSxHQUFFLENBQUc7QUFDTCxrQkFBVSxLQUFLLEFBQUMsQ0FBQyxHQUFFLENBQUMsQ0FBQztNQUN6QixLQUNLO0FBQ0QsWUFBSSxBQUFDLEVBQUMsMEJBQTBCLEVBQUMsQ0FBQSxNQUFLLE9BQU8sRUFBRyxDQUFDO0FBQ2pELGtCQUFVLFNBQVMsQUFBQyxDQUFDLE1BQUssQ0FBQyxDQUFDO01BQ2hDO0FBQUEsQUFDQSxXQUFLLE1BQU0sQUFBQyxFQUFDLENBQUM7SUFDbEIsQ0FBQyxDQUFDO0VBQ04sS0FDSztBQUNELFFBQUksQUFBQyxDQUFDLGdDQUErQixDQUFDLENBQUM7QUFDdkMsYUFBUyxxQkFBcUIsQUFBQyxDQUFDLElBQUcsQ0FBRyxPQUFLLENBQUMsQ0FBQztBQUM3QyxjQUFVLFNBQVMsQUFBQyxDQUFDLE1BQUssQ0FBQyxDQUFDO0VBQ2hDO0FBQUEsQUFDSixDQUFDO0FBRUQsS0FBSyxRQUFRLEVBQUksS0FBRyxDQUFDO0FBQUEiLCJmaWxlIjoiYWN0aXZpdGllcy9maW5kLmpzIiwic291cmNlUm9vdCI6ImxpYi9lczYiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubGV0IHV0aWwgPSByZXF1aXJlKFwidXRpbFwiKTtcbmxldCBRdWVyeSA9IHJlcXVpcmUoXCIuL3F1ZXJ5XCIpO1xubGV0IFVuaXRPZldvcmsgPSByZXF1aXJlKFwiLi91bml0T2ZXb3JrXCIpO1xubGV0IGRlYnVnID0gcmVxdWlyZShcImRlYnVnXCIpKFwibW9uZ28tY3J1bmNoOkZpbmRcIik7XG5cbmZ1bmN0aW9uIEZpbmQoKSB7XG4gICAgUXVlcnkuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMudG9BcnJheSA9IGZhbHNlO1xufVxuXG51dGlsLmluaGVyaXRzKEZpbmQsIFF1ZXJ5KTtcblxuRmluZC5wcm90b3R5cGUuZG9RdWVyeSA9IGZ1bmN0aW9uKGNhbGxDb250ZXh0LCBxdWVyeSwgb3B0aW9ucykge1xuICAgIGxldCBjb2xsID0gdGhpcy5nZXRDb2xsZWN0aW9uLmNhbGwodGhpcyk7XG4gICAgcXVlcnkgPSBxdWVyeSB8fCB7fTtcbiAgICBkZWJ1ZyhgQ3JlYXRpbmcgY3Vyc29yIGZvciBxdWVyeTpcXG4ke3V0aWwuaW5zcGVjdChxdWVyeSl9XFxub3B0aW9uczpcXG4ke3V0aWwuaW5zcGVjdChvcHRpb25zKX1gKTtcbiAgICBsZXQgY3Vyc29yID0gY29sbC5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcbiAgICBpZiAodGhpcy50b0FycmF5KSB7XG4gICAgICAgIGRlYnVnKGBDb252ZXJ0aW5nIGN1cnNvciB0byBhcnJheS5gKTtcbiAgICAgICAgY3Vyc29yLnRvQXJyYXkoZnVuY3Rpb24oZXJyLCByZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjYWxsQ29udGV4dC5mYWlsKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWJ1ZyhgUmVzdWx0IGRvY3VtZW50cyBjb3VudDogJHtyZXN1bHQubGVuZ3RofWApO1xuICAgICAgICAgICAgICAgIGNhbGxDb250ZXh0LmNvbXBsZXRlKHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJzb3IuY2xvc2UoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBkZWJ1ZyhgUmVnaXN0ZXJpbmcgY3Vyc29yIGluIGNvbnRleHQuYCk7XG4gICAgICAgIFVuaXRPZldvcmsucmVnaXN0ZXJPcGVuZWRDdXJzb3IodGhpcywgY3Vyc29yKTtcbiAgICAgICAgY2FsbENvbnRleHQuY29tcGxldGUoY3Vyc29yKTtcbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZpbmQ7Il19
