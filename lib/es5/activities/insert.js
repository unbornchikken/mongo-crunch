"use strict";
"use strict";
var wf4node = require("../../../deps/workflow-4-node");
var util = require("util");
var Modify = require("./modify");
var Activity = wf4node.activities.Activity;
var debug = require("debug")("mongo-crunch:Insert");
var Bluebird = require("bluebird");
var p = Bluebird.promisify;
function Insert() {
  Modify.call(this);
  this.documents = null;
}
util.inherits(Insert, Modify);
Insert.prototype.doWork = function(callContext) {
  debug("Scheduling documents.");
  callContext.schedule(this.get("documents"), "_documentsGot");
};
Insert.prototype._documentsGot = function(callContext, reason, result) {
  if (reason === Activity.states.complete) {
    if (result) {
      if (_.isArray(result)) {
        if (result.length) {
          var coll = callContext.activity.getCollection(this);
          var options = this.getOptions();
          debug(("Inserting " + result.length + " documents."));
          debug(("Options: " + options));
          p(coll.insertMany, coll)(result, options).then(function(r) {
            debug(("Insert completed. Result: " + r));
            callContext.complete(r);
          }).catch(function(e) {
            callContext.fail(e);
          });
          return ;
        }
      } else if (_.isPlainObject(result)) {
        var coll$__0 = callContext.activity.getCollection(this);
        var options$__1 = this.getOptions();
        debug(("Inserting a document: " + result));
        debug(("Options: " + options$__1));
        p(coll$__0.insertOne, coll$__0)(result, options$__1).then(function(r) {
          debug(("Insert completed. Result: " + r));
          callContext.complete(r);
        }).catch(function(e) {
          callContext.fail(e);
        });
        return ;
      } else {
        callContext.fail(new Error(("Unknown type of documents property: " + typeof result + ".")));
      }
    }
    debug("No documents, ending.");
    callContext.end(reason);
  } else {
    callContext.end(reason, result);
  }
};
module.exports = Insert;
//# sourceMappingURL=data:application/json;base64,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QUFBLElBQUcsV0FBVyxBQUFDLEVBQUMsQ0FBQztBQUMvQixZQUFJLEFBQUMsRUFBQyx3QkFBd0IsRUFBQyxPQUFLLEVBQUcsQ0FBQztBQUN4QyxZQUFJLEFBQUMsRUFBQyxXQUFXLGdCQUFVLENBQUM7QUFDNUIsUUFBQSxBQUFDLENBQUMsa0JBQWEsV0FBTyxBQUFDLENBQUMsTUFBSyxjQUFVLEtBQy9CLEFBQUMsQ0FBQyxTQUFTLENBQUEsQ0FBRztBQUNkLGNBQUksQUFBQyxFQUFDLDRCQUE0QixFQUFDLEVBQUEsRUFBRyxDQUFDO0FBQ3ZDLG9CQUFVLFNBQVMsQUFBQyxDQUFDLENBQUEsQ0FBQyxDQUFDO1FBQzNCLENBQUMsTUFDSSxBQUFDLENBQUMsU0FBUyxDQUFBLENBQUc7QUFDZixvQkFBVSxLQUFLLEFBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQztRQUN2QixDQUFDLENBQUM7QUFDTixlQUFNO01BQ1YsS0FDSztBQUNELGtCQUFVLEtBQUssQUFBQyxDQUFDLEdBQUksTUFBSSxBQUFDLEVBQUMsc0NBQXNDLEVBQUMsT0FBTyxPQUFLLENBQUEsQ0FBQyxJQUFFLEVBQUMsQ0FBQyxDQUFDO01BQ3hGO0FBQUEsSUFDSjtBQUFBLEFBQ0EsUUFBSSxBQUFDLENBQUMsdUJBQXNCLENBQUMsQ0FBQztBQUM5QixjQUFVLElBQUksQUFBQyxDQUFDLE1BQUssQ0FBQyxDQUFDO0VBQzNCLEtBQ0s7QUFDRCxjQUFVLElBQUksQUFBQyxDQUFDLE1BQUssQ0FBRyxPQUFLLENBQUMsQ0FBQztFQUNuQztBQUFBLEFBQ0osQ0FBQztBQUVELEtBQUssUUFBUSxFQUFJLE9BQUssQ0FBQztBQUFBIiwiZmlsZSI6ImFjdGl2aXRpZXMvaW5zZXJ0LmpzIiwic291cmNlUm9vdCI6ImxpYi9lczYiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmxldCB3ZjRub2RlID0gcmVxdWlyZShcIi4uLy4uLy4uL2RlcHMvd29ya2Zsb3ctNC1ub2RlXCIpO1xyXG5sZXQgdXRpbCA9IHJlcXVpcmUoXCJ1dGlsXCIpO1xyXG5sZXQgTW9kaWZ5ID0gcmVxdWlyZShcIi4vbW9kaWZ5XCIpO1xyXG5sZXQgQWN0aXZpdHkgPSB3ZjRub2RlLmFjdGl2aXRpZXMuQWN0aXZpdHk7XHJcbmxldCBkZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKShcIm1vbmdvLWNydW5jaDpJbnNlcnRcIik7XHJcbmxldCBCbHVlYmlyZCA9IHJlcXVpcmUoXCJibHVlYmlyZFwiKTtcclxubGV0IHAgPSBCbHVlYmlyZC5wcm9taXNpZnk7XHJcblxyXG5mdW5jdGlvbiBJbnNlcnQoKSB7XHJcbiAgICBNb2RpZnkuY2FsbCh0aGlzKTtcclxuXHJcbiAgICB0aGlzLmRvY3VtZW50cyA9IG51bGw7XHJcbn1cclxuXHJcbnV0aWwuaW5oZXJpdHMoSW5zZXJ0LCBNb2RpZnkpO1xyXG5cclxuSW5zZXJ0LnByb3RvdHlwZS5kb1dvcmsgPSBmdW5jdGlvbiAoY2FsbENvbnRleHQpIHtcclxuICAgIGRlYnVnKFwiU2NoZWR1bGluZyBkb2N1bWVudHMuXCIpO1xyXG4gICAgY2FsbENvbnRleHQuc2NoZWR1bGUodGhpcy5nZXQoXCJkb2N1bWVudHNcIiksIFwiX2RvY3VtZW50c0dvdFwiKTtcclxufTtcclxuXHJcbkluc2VydC5wcm90b3R5cGUuX2RvY3VtZW50c0dvdCA9IGZ1bmN0aW9uIChjYWxsQ29udGV4dCwgcmVhc29uLCByZXN1bHQpIHtcclxuICAgIGlmIChyZWFzb24gPT09IEFjdGl2aXR5LnN0YXRlcy5jb21wbGV0ZSkge1xyXG4gICAgICAgIGlmIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgaWYgKF8uaXNBcnJheShyZXN1bHQpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjb2xsID0gY2FsbENvbnRleHQuYWN0aXZpdHkuZ2V0Q29sbGVjdGlvbih0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgb3B0aW9ucyA9IHRoaXMuZ2V0T3B0aW9ucygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlYnVnKGBJbnNlcnRpbmcgJHtyZXN1bHQubGVuZ3RofSBkb2N1bWVudHMuYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVidWcoYE9wdGlvbnM6ICR7b3B0aW9uc31gKTtcclxuICAgICAgICAgICAgICAgICAgICBwKGNvbGwuaW5zZXJ0TWFueSwgY29sbCkocmVzdWx0LCBvcHRpb25zKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWJ1ZyhgSW5zZXJ0IGNvbXBsZXRlZC4gUmVzdWx0OiAke3J9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsQ29udGV4dC5jb21wbGV0ZShyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxDb250ZXh0LmZhaWwoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChfLmlzUGxhaW5PYmplY3QocmVzdWx0KSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGNvbGwgPSBjYWxsQ29udGV4dC5hY3Rpdml0eS5nZXRDb2xsZWN0aW9uKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgbGV0IG9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMoKTtcclxuICAgICAgICAgICAgICAgIGRlYnVnKGBJbnNlcnRpbmcgYSBkb2N1bWVudDogJHtyZXN1bHR9YCk7XHJcbiAgICAgICAgICAgICAgICBkZWJ1ZyhgT3B0aW9uczogJHtvcHRpb25zfWApO1xyXG4gICAgICAgICAgICAgICAgcChjb2xsLmluc2VydE9uZSwgY29sbCkocmVzdWx0LCBvcHRpb25zKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVidWcoYEluc2VydCBjb21wbGV0ZWQuIFJlc3VsdDogJHtyfWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsQ29udGV4dC5jb21wbGV0ZShyKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxDb250ZXh0LmZhaWwoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsQ29udGV4dC5mYWlsKG5ldyBFcnJvcihgVW5rbm93biB0eXBlIG9mIGRvY3VtZW50cyBwcm9wZXJ0eTogJHt0eXBlb2YgcmVzdWx0fS5gKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZGVidWcoXCJObyBkb2N1bWVudHMsIGVuZGluZy5cIik7XHJcbiAgICAgICAgY2FsbENvbnRleHQuZW5kKHJlYXNvbik7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBjYWxsQ29udGV4dC5lbmQocmVhc29uLCByZXN1bHQpO1xyXG4gICAgfVxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBJbnNlcnQ7Il19
