"use strict";
"use strict";
var wf4node = require("workflow-4-node");
var util = require("util");
var Modify = require("./modify");
var Activity = wf4node.activities.Activity;
var debug = require("debug")("mongo-crunch:Insert");
var Bluebird = require("bluebird");
var _ = require("lodash");
var UnitOfWork = require("./unitOfWork");
var Collection = require("mongodb").Collection;
var createIterator = require("./createIterator");
var config = require("../config");
function Insert() {
  Modify.call(this);
  this.documents = null;
}
util.inherits(Insert, Modify);
Insert.prototype.doWork = function(callContext) {
  debug("Scheduling documents.");
  callContext.schedule(this.documents, "_documentsGot");
};
Insert.prototype._documentsGot = function(callContext, reason, result) {
  var self = this;
  if (reason === Activity.states.complete) {
    if (result) {
      var coll = this.getCollection.call(this);
      var options = this.getOptions.call(this);
      var it = createIterator(this, result);
      var bulk = coll.initializeUnorderedBulkOp();
      var count = 0;
      debug("Processing.");
      var process = function() {
        it.next(function(err, doc) {
          if (err) {
            debug(("Next failed.\n" + err.stack));
            callContext.fail(err);
          } else if (doc) {
            debug("Doc got:\n%j", doc);
            bulk.insert(_.clone(doc));
            count++;
            if (count >= config.bulkSize) {
              debug("Executing bulk.");
              bulk.execute(options, function(err2, bwResult) {
                if (err2) {
                  debug(("Bulk execute failed.\n" + (err2.stack ? err2.stack : err2)));
                  callContext.fail(err2);
                } else {
                  debug("Bulk executed.");
                  count = 0;
                  bulk = coll.initializeUnorderedBulkOp();
                  process();
                }
              });
            } else {
              process();
            }
          } else {
            if (!count) {
              callContext.complete();
            } else {
              debug("Executing final bulk.");
              bulk.execute(options, function(err2, bwResult) {
                if (err2) {
                  debug(("Bulk execute failed.\n" + err2.stack));
                  callContext.fail(err2);
                } else {
                  debug("Bulk executed.");
                  callContext.complete();
                }
              });
            }
          }
        });
      };
      process();
    } else {
      debug("No documents, ending.");
      callContext.end(reason);
    }
  } else {
    callContext.end(reason, result);
  }
};
module.exports = Insert;
//# sourceMappingURL=data:application/json;base64,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QkFBRyxRQUFRLEFBQUMsQ0FBQyxPQUFNLENBQUcsVUFBUyxJQUFHLENBQUcsQ0FBQSxRQUFPLENBQUc7QUFDM0MsbUJBQUksSUFBRyxDQUFHO0FBQ04sc0JBQUksQUFBQyxFQUFDLHdCQUF3QixFQUFDLENBQUEsSUFBRyxNQUFNLEVBQUcsQ0FBQztBQUM1Qyw0QkFBVSxLQUFLLEFBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQztnQkFDMUIsS0FDSztBQUNELHNCQUFJLEFBQUMsQ0FBQyxnQkFBZSxDQUFDLENBQUM7QUFDdkIsNEJBQVUsU0FBUyxBQUFDLEVBQUMsQ0FBQztnQkFDMUI7QUFBQSxjQUNKLENBQUMsQ0FBQztZQUNOO0FBQUEsVUFDSjtBQUFBLFFBQ0osQ0FBQyxDQUFDO01BQ04sQ0FBQztBQUNELFlBQU0sQUFBQyxFQUFDLENBQUM7SUFDYixLQUNLO0FBQ0QsVUFBSSxBQUFDLENBQUMsdUJBQXNCLENBQUMsQ0FBQztBQUM5QixnQkFBVSxJQUFJLEFBQUMsQ0FBQyxNQUFLLENBQUMsQ0FBQztJQUMzQjtBQUFBLEVBQ0osS0FDSztBQUNELGNBQVUsSUFBSSxBQUFDLENBQUMsTUFBSyxDQUFHLE9BQUssQ0FBQyxDQUFDO0VBQ25DO0FBQUEsQUFDSixDQUFDO0FBRUQsS0FBSyxRQUFRLEVBQUksT0FBSyxDQUFDO0FBQUEiLCJmaWxlIjoiYWN0aXZpdGllcy9pbnNlcnQuanMiLCJzb3VyY2VSb290IjoibGliL2VzNiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5sZXQgd2Y0bm9kZSA9IHJlcXVpcmUoXCJ3b3JrZmxvdy00LW5vZGVcIik7XG5sZXQgdXRpbCA9IHJlcXVpcmUoXCJ1dGlsXCIpO1xubGV0IE1vZGlmeSA9IHJlcXVpcmUoXCIuL21vZGlmeVwiKTtcbmxldCBBY3Rpdml0eSA9IHdmNG5vZGUuYWN0aXZpdGllcy5BY3Rpdml0eTtcbmxldCBkZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKShcIm1vbmdvLWNydW5jaDpJbnNlcnRcIik7XG5sZXQgQmx1ZWJpcmQgPSByZXF1aXJlKFwiYmx1ZWJpcmRcIik7XG5sZXQgXyA9IHJlcXVpcmUoXCJsb2Rhc2hcIik7XG5sZXQgVW5pdE9mV29yayA9IHJlcXVpcmUoXCIuL3VuaXRPZldvcmtcIik7XG5sZXQgQ29sbGVjdGlvbiA9IHJlcXVpcmUoXCJtb25nb2RiXCIpLkNvbGxlY3Rpb247XG5sZXQgY3JlYXRlSXRlcmF0b3IgPSByZXF1aXJlKFwiLi9jcmVhdGVJdGVyYXRvclwiKTtcbmxldCBjb25maWcgPSByZXF1aXJlKFwiLi4vY29uZmlnXCIpO1xuXG5mdW5jdGlvbiBJbnNlcnQoKSB7XG4gICAgTW9kaWZ5LmNhbGwodGhpcyk7XG5cbiAgICB0aGlzLmRvY3VtZW50cyA9IG51bGw7XG59XG5cbnV0aWwuaW5oZXJpdHMoSW5zZXJ0LCBNb2RpZnkpO1xuXG5JbnNlcnQucHJvdG90eXBlLmRvV29yayA9IGZ1bmN0aW9uIChjYWxsQ29udGV4dCkge1xuICAgIGRlYnVnKFwiU2NoZWR1bGluZyBkb2N1bWVudHMuXCIpO1xuICAgIGNhbGxDb250ZXh0LnNjaGVkdWxlKHRoaXMuZG9jdW1lbnRzLCBcIl9kb2N1bWVudHNHb3RcIik7XG59O1xuXG5JbnNlcnQucHJvdG90eXBlLl9kb2N1bWVudHNHb3QgPSBmdW5jdGlvbiAoY2FsbENvbnRleHQsIHJlYXNvbiwgcmVzdWx0KSB7XG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgIGlmIChyZWFzb24gPT09IEFjdGl2aXR5LnN0YXRlcy5jb21wbGV0ZSkge1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICBsZXQgY29sbCA9IHRoaXMuZ2V0Q29sbGVjdGlvbi5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgbGV0IG9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIGxldCBpdCA9IGNyZWF0ZUl0ZXJhdG9yKHRoaXMsIHJlc3VsdCk7XG4gICAgICAgICAgICBsZXQgYnVsayA9IGNvbGwuaW5pdGlhbGl6ZVVub3JkZXJlZEJ1bGtPcCgpO1xuICAgICAgICAgICAgdmFyIGNvdW50ID0gMDtcbiAgICAgICAgICAgIGRlYnVnKFwiUHJvY2Vzc2luZy5cIik7XG4gICAgICAgICAgICB2YXIgcHJvY2VzcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGl0Lm5leHQoZnVuY3Rpb24gKGVyciwgZG9jKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnKGBOZXh0IGZhaWxlZC5cXG4ke2Vyci5zdGFja31gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxDb250ZXh0LmZhaWwoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChkb2MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnKFwiRG9jIGdvdDpcXG4lalwiLCBkb2MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVsay5pbnNlcnQoXy5jbG9uZShkb2MpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY291bnQgPj0gY29uZmlnLmJ1bGtTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVidWcoXCJFeGVjdXRpbmcgYnVsay5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVsay5leGVjdXRlKG9wdGlvbnMsIGZ1bmN0aW9uKGVycjIsIGJ3UmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnIyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWJ1ZyhgQnVsayBleGVjdXRlIGZhaWxlZC5cXG4ke2VycjIuc3RhY2sgPyBlcnIyLnN0YWNrIDogZXJyMn1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxDb250ZXh0LmZhaWwoZXJyMik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWJ1ZyhcIkJ1bGsgZXhlY3V0ZWQuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVsayA9IGNvbGwuaW5pdGlhbGl6ZVVub3JkZXJlZEJ1bGtPcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2VzcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbENvbnRleHQuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnKFwiRXhlY3V0aW5nIGZpbmFsIGJ1bGsuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1bGsuZXhlY3V0ZShvcHRpb25zLCBmdW5jdGlvbihlcnIyLCBid1Jlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVidWcoYEJ1bGsgZXhlY3V0ZSBmYWlsZWQuXFxuJHtlcnIyLnN0YWNrfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbENvbnRleHQuZmFpbChlcnIyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnKFwiQnVsayBleGVjdXRlZC5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsQ29udGV4dC5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBwcm9jZXNzKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkZWJ1ZyhcIk5vIGRvY3VtZW50cywgZW5kaW5nLlwiKTtcbiAgICAgICAgICAgIGNhbGxDb250ZXh0LmVuZChyZWFzb24pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjYWxsQ29udGV4dC5lbmQocmVhc29uLCByZXN1bHQpO1xuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW5zZXJ0OyJdfQ==
