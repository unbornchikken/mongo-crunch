"use strict";
"use strict";
var wf4node = require("workflow-4-node");
var util = require("util");
var Activity = wf4node.activities.Activity;
var Collection = require("mongodb").Collection;
var Collectionify = require("./collectionify");
var CollectionRef = require("./collectionRef");
var _ = require("lodash");
function CollectionOp() {
  Activity.call(this);
  this.collection = null;
  this.nonScopedProperties.add("doWork");
}
util.inherits(CollectionOp, Activity);
Object.defineProperties(CollectionOp.prototype, {collectionify: {
    value: false,
    enumerable: false
  }});
CollectionOp.prototype.initializeStructure = function() {
  if (_.isString(this.collection)) {
    var name = this.collection;
    this.collection = new CollectionRef();
    this.collection.name = name;
  }
};
CollectionOp.prototype.getCollection = function(mustSet) {
  mustSet = _.isUndefined(mustSet) ? true : !!mustSet;
  var collection = this.collection;
  if (mustSet && !(collection instanceof Collection)) {
    throw new Error(("'" + collection + " is not a Collection instance'"));
  }
  return collection;
};
CollectionOp.prototype.initializeStructure = function() {
  if (this.collectionify) {
    var coll = this.collection;
    this.collection = new Collectionify();
    this.collection.input = coll;
  }
};
CollectionOp.prototype.run = function(callContext, args) {
  this._args = args;
  callContext.schedule(this.collection, "_collectionGot");
};
CollectionOp.prototype._collectionGot = function(callContext, reason, result) {
  if (reason !== Activity.states.complete) {
    callContext.end(reason, result);
    return;
  }
  this.collection = result;
  callContext.activity.doWork.call(this, callContext);
};
CollectionOp.prototype.doWork = function(callContext) {
  callContext.fail(new Error("Not implemented."));
};
module.exports = CollectionOp;
//# sourceMappingURL=data:application/json;base64,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QUFTLEFBQUMsQ0FBQyxJQUFHLFdBQVcsQ0FBRyxpQkFBZSxDQUFDLENBQUM7QUFDM0QsQ0FBQztBQUVELFdBQVcsVUFBVSxlQUFlLEVBQUksVUFBUyxXQUFVLENBQUcsQ0FBQSxNQUFLLENBQUcsQ0FBQSxNQUFLLENBQUc7QUFDMUUsS0FBSSxNQUFLLElBQU0sQ0FBQSxRQUFPLE9BQU8sU0FBUyxDQUFHO0FBQ3JDLGNBQVUsSUFBSSxBQUFDLENBQUMsTUFBSyxDQUFHLE9BQUssQ0FBQyxDQUFDO0FBQy9CLFVBQU07RUFDVjtBQUFBLEFBRUEsS0FBRyxXQUFXLEVBQUksT0FBSyxDQUFDO0FBQ3hCLFlBQVUsU0FBUyxPQUFPLEtBQUssQUFBQyxDQUFDLElBQUcsQ0FBRyxZQUFVLENBQUMsQ0FBQztBQUN2RCxDQUFDO0FBRUQsV0FBVyxVQUFVLE9BQU8sRUFBSSxVQUFTLFdBQVUsQ0FBRTtBQUNqRCxZQUFVLEtBQUssQUFBQyxDQUFDLEdBQUksTUFBSSxBQUFDLENBQUMsa0JBQWlCLENBQUMsQ0FBQyxDQUFDO0FBQ25ELENBQUM7QUFFRCxLQUFLLFFBQVEsRUFBSSxhQUFXLENBQUM7QUFBQSIsImZpbGUiOiJhY3Rpdml0aWVzL2NvbGxlY3Rpb25PcC5qcyIsInNvdXJjZVJvb3QiOiJsaWIvZXM2Iiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5sZXQgd2Y0bm9kZSA9IHJlcXVpcmUoXCJ3b3JrZmxvdy00LW5vZGVcIik7XHJcbmxldCB1dGlsID0gcmVxdWlyZShcInV0aWxcIik7XHJcbmxldCBBY3Rpdml0eSA9IHdmNG5vZGUuYWN0aXZpdGllcy5BY3Rpdml0eTtcclxubGV0IENvbGxlY3Rpb24gPSByZXF1aXJlKFwibW9uZ29kYlwiKS5Db2xsZWN0aW9uO1xyXG5sZXQgQ29sbGVjdGlvbmlmeSA9IHJlcXVpcmUoXCIuL2NvbGxlY3Rpb25pZnlcIik7XHJcbmxldCBDb2xsZWN0aW9uUmVmID0gcmVxdWlyZShcIi4vY29sbGVjdGlvblJlZlwiKTtcclxubGV0IF8gPSByZXF1aXJlKFwibG9kYXNoXCIpO1xyXG5cclxuZnVuY3Rpb24gQ29sbGVjdGlvbk9wKCkge1xyXG4gICAgQWN0aXZpdHkuY2FsbCh0aGlzKTtcclxuXHJcbiAgICB0aGlzLmNvbGxlY3Rpb24gPSBudWxsO1xyXG4gICAgdGhpcy5ub25TY29wZWRQcm9wZXJ0aWVzLmFkZChcImRvV29ya1wiKTtcclxufVxyXG5cclxudXRpbC5pbmhlcml0cyhDb2xsZWN0aW9uT3AsIEFjdGl2aXR5KTtcclxuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKENvbGxlY3Rpb25PcC5wcm90b3R5cGUsIHtcclxuICAgIGNvbGxlY3Rpb25pZnk6IHtcclxuICAgICAgICB2YWx1ZTogZmFsc2UsXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2VcclxuICAgIH1cclxufSk7XHJcblxyXG5Db2xsZWN0aW9uT3AucHJvdG90eXBlLmluaXRpYWxpemVTdHJ1Y3R1cmUgPSBmdW5jdGlvbigpIHtcclxuICAgIGlmIChfLmlzU3RyaW5nKHRoaXMuY29sbGVjdGlvbikpIHtcclxuICAgICAgICBsZXQgbmFtZSA9IHRoaXMuY29sbGVjdGlvbjtcclxuICAgICAgICB0aGlzLmNvbGxlY3Rpb24gPSBuZXcgQ29sbGVjdGlvblJlZigpO1xyXG4gICAgICAgIHRoaXMuY29sbGVjdGlvbi5uYW1lID0gbmFtZTtcclxuICAgIH1cclxufTtcclxuXHJcbkNvbGxlY3Rpb25PcC5wcm90b3R5cGUuZ2V0Q29sbGVjdGlvbiA9IGZ1bmN0aW9uKG11c3RTZXQpIHtcclxuICAgIG11c3RTZXQgPSBfLmlzVW5kZWZpbmVkKG11c3RTZXQpID8gdHJ1ZSA6ICEhbXVzdFNldDtcclxuICAgIGxldCBjb2xsZWN0aW9uID0gdGhpcy5jb2xsZWN0aW9uO1xyXG4gICAgaWYgKG11c3RTZXQgJiYgIShjb2xsZWN0aW9uIGluc3RhbmNlb2YgQ29sbGVjdGlvbikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCcke2NvbGxlY3Rpb259IGlzIG5vdCBhIENvbGxlY3Rpb24gaW5zdGFuY2UnYCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY29sbGVjdGlvbjtcclxufTtcclxuXHJcbkNvbGxlY3Rpb25PcC5wcm90b3R5cGUuaW5pdGlhbGl6ZVN0cnVjdHVyZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKHRoaXMuY29sbGVjdGlvbmlmeSkge1xyXG4gICAgICAgIGxldCBjb2xsID0gdGhpcy5jb2xsZWN0aW9uO1xyXG4gICAgICAgIHRoaXMuY29sbGVjdGlvbiA9IG5ldyBDb2xsZWN0aW9uaWZ5KCk7XHJcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uLmlucHV0ID0gY29sbDtcclxuICAgIH1cclxufTtcclxuXHJcbkNvbGxlY3Rpb25PcC5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24oY2FsbENvbnRleHQsIGFyZ3MpIHtcclxuICAgIHRoaXMuX2FyZ3MgPSBhcmdzO1xyXG4gICAgY2FsbENvbnRleHQuc2NoZWR1bGUodGhpcy5jb2xsZWN0aW9uLCBcIl9jb2xsZWN0aW9uR290XCIpO1xyXG59O1xyXG5cclxuQ29sbGVjdGlvbk9wLnByb3RvdHlwZS5fY29sbGVjdGlvbkdvdCA9IGZ1bmN0aW9uKGNhbGxDb250ZXh0LCByZWFzb24sIHJlc3VsdCkge1xyXG4gICAgaWYgKHJlYXNvbiAhPT0gQWN0aXZpdHkuc3RhdGVzLmNvbXBsZXRlKSB7XHJcbiAgICAgICAgY2FsbENvbnRleHQuZW5kKHJlYXNvbiwgcmVzdWx0KTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5jb2xsZWN0aW9uID0gcmVzdWx0O1xyXG4gICAgY2FsbENvbnRleHQuYWN0aXZpdHkuZG9Xb3JrLmNhbGwodGhpcywgY2FsbENvbnRleHQpO1xyXG59O1xyXG5cclxuQ29sbGVjdGlvbk9wLnByb3RvdHlwZS5kb1dvcmsgPSBmdW5jdGlvbihjYWxsQ29udGV4dCl7XHJcbiAgICBjYWxsQ29udGV4dC5mYWlsKG5ldyBFcnJvcihcIk5vdCBpbXBsZW1lbnRlZC5cIikpO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBDb2xsZWN0aW9uT3A7Il19
