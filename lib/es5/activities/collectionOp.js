"use strict";
"use strict";
var wf4node = require("workflow-4-node");
var util = require("util");
var Activity = wf4node.activities.Activity;
var Collection = require("mongodb").Collection;
var Collectionify = require("./collectionify");
var CollectionRef = require("./collectionRef");
var _ = require("lodash");
function CollectionOp() {
  Activity.call(this);
  this.collection = null;
  this.nonScopedProperties.add("doWork");
}
util.inherits(CollectionOp, Activity);
Object.defineProperties(CollectionOp.prototype, {collectionify: {
    value: false,
    enumerable: false
  }});
CollectionOp.prototype.getCollection = function(mustSet) {
  mustSet = _.isUndefined(mustSet) ? true : !!mustSet;
  var collection = this.collection;
  if (mustSet && !(collection instanceof Collection)) {
    throw new Error(("'" + collection + " is not a Collection instance'"));
  }
  return collection;
};
CollectionOp.prototype.initializeStructure = function() {
  if (_.isString(this.collection)) {
    var name = this.collection;
    this.collection = new CollectionRef();
    this.collection.name = name;
  }
  if (this.collectionify) {
    var coll = this.collection;
    this.collection = new Collectionify();
    this.collection.input = coll;
  }
};
CollectionOp.prototype.run = function(callContext, args) {
  this._args = args;
  callContext.schedule(this.collection, "_collectionGot");
};
CollectionOp.prototype._collectionGot = function(callContext, reason, result) {
  if (reason !== Activity.states.complete) {
    callContext.end(reason, result);
    return;
  }
  this.collection = result;
  callContext.activity.doWork.call(this, callContext);
};
CollectionOp.prototype.doWork = function(callContext) {
  callContext.fail(new Error("Not implemented."));
};
module.exports = CollectionOp;
//# sourceMappingURL=data:application/json;base64,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QUM7QUFFRCxXQUFXLFVBQVUsZUFBZSxFQUFJLFVBQVMsV0FBVSxDQUFHLENBQUEsTUFBSyxDQUFHLENBQUEsTUFBSyxDQUFHO0FBQzFFLEtBQUksTUFBSyxJQUFNLENBQUEsUUFBTyxPQUFPLFNBQVMsQ0FBRztBQUNyQyxjQUFVLElBQUksQUFBQyxDQUFDLE1BQUssQ0FBRyxPQUFLLENBQUMsQ0FBQztBQUMvQixVQUFNO0VBQ1Y7QUFBQSxBQUVBLEtBQUcsV0FBVyxFQUFJLE9BQUssQ0FBQztBQUN4QixZQUFVLFNBQVMsT0FBTyxLQUFLLEFBQUMsQ0FBQyxJQUFHLENBQUcsWUFBVSxDQUFDLENBQUM7QUFDdkQsQ0FBQztBQUVELFdBQVcsVUFBVSxPQUFPLEVBQUksVUFBUyxXQUFVLENBQUU7QUFDakQsWUFBVSxLQUFLLEFBQUMsQ0FBQyxHQUFJLE1BQUksQUFBQyxDQUFDLGtCQUFpQixDQUFDLENBQUMsQ0FBQztBQUNuRCxDQUFDO0FBRUQsS0FBSyxRQUFRLEVBQUksYUFBVyxDQUFDO0FBQUEiLCJmaWxlIjoiYWN0aXZpdGllcy9jb2xsZWN0aW9uT3AuanMiLCJzb3VyY2VSb290IjoibGliL2VzNiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxubGV0IHdmNG5vZGUgPSByZXF1aXJlKFwid29ya2Zsb3ctNC1ub2RlXCIpO1xyXG5sZXQgdXRpbCA9IHJlcXVpcmUoXCJ1dGlsXCIpO1xyXG5sZXQgQWN0aXZpdHkgPSB3ZjRub2RlLmFjdGl2aXRpZXMuQWN0aXZpdHk7XHJcbmxldCBDb2xsZWN0aW9uID0gcmVxdWlyZShcIm1vbmdvZGJcIikuQ29sbGVjdGlvbjtcclxubGV0IENvbGxlY3Rpb25pZnkgPSByZXF1aXJlKFwiLi9jb2xsZWN0aW9uaWZ5XCIpO1xyXG5sZXQgQ29sbGVjdGlvblJlZiA9IHJlcXVpcmUoXCIuL2NvbGxlY3Rpb25SZWZcIik7XHJcbmxldCBfID0gcmVxdWlyZShcImxvZGFzaFwiKTtcclxuXHJcbmZ1bmN0aW9uIENvbGxlY3Rpb25PcCgpIHtcclxuICAgIEFjdGl2aXR5LmNhbGwodGhpcyk7XHJcblxyXG4gICAgdGhpcy5jb2xsZWN0aW9uID0gbnVsbDtcclxuICAgIHRoaXMubm9uU2NvcGVkUHJvcGVydGllcy5hZGQoXCJkb1dvcmtcIik7XHJcbn1cclxuXHJcbnV0aWwuaW5oZXJpdHMoQ29sbGVjdGlvbk9wLCBBY3Rpdml0eSk7XHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhDb2xsZWN0aW9uT3AucHJvdG90eXBlLCB7XHJcbiAgICBjb2xsZWN0aW9uaWZ5OiB7XHJcbiAgICAgICAgdmFsdWU6IGZhbHNlLFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlXHJcbiAgICB9XHJcbn0pO1xyXG5cclxuQ29sbGVjdGlvbk9wLnByb3RvdHlwZS5nZXRDb2xsZWN0aW9uID0gZnVuY3Rpb24obXVzdFNldCkge1xyXG4gICAgbXVzdFNldCA9IF8uaXNVbmRlZmluZWQobXVzdFNldCkgPyB0cnVlIDogISFtdXN0U2V0O1xyXG4gICAgbGV0IGNvbGxlY3Rpb24gPSB0aGlzLmNvbGxlY3Rpb247XHJcbiAgICBpZiAobXVzdFNldCAmJiAhKGNvbGxlY3Rpb24gaW5zdGFuY2VvZiBDb2xsZWN0aW9uKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJyR7Y29sbGVjdGlvbn0gaXMgbm90IGEgQ29sbGVjdGlvbiBpbnN0YW5jZSdgKTtcclxuICAgIH1cclxuICAgIHJldHVybiBjb2xsZWN0aW9uO1xyXG59O1xyXG5cclxuQ29sbGVjdGlvbk9wLnByb3RvdHlwZS5pbml0aWFsaXplU3RydWN0dXJlID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZiAoXy5pc1N0cmluZyh0aGlzLmNvbGxlY3Rpb24pKSB7XHJcbiAgICAgICAgbGV0IG5hbWUgPSB0aGlzLmNvbGxlY3Rpb247XHJcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gbmV3IENvbGxlY3Rpb25SZWYoKTtcclxuICAgICAgICB0aGlzLmNvbGxlY3Rpb24ubmFtZSA9IG5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuY29sbGVjdGlvbmlmeSkge1xyXG4gICAgICAgIGxldCBjb2xsID0gdGhpcy5jb2xsZWN0aW9uO1xyXG4gICAgICAgIHRoaXMuY29sbGVjdGlvbiA9IG5ldyBDb2xsZWN0aW9uaWZ5KCk7XHJcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uLmlucHV0ID0gY29sbDtcclxuICAgIH1cclxufTtcclxuXHJcbkNvbGxlY3Rpb25PcC5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24oY2FsbENvbnRleHQsIGFyZ3MpIHtcclxuICAgIHRoaXMuX2FyZ3MgPSBhcmdzO1xyXG4gICAgY2FsbENvbnRleHQuc2NoZWR1bGUodGhpcy5jb2xsZWN0aW9uLCBcIl9jb2xsZWN0aW9uR290XCIpO1xyXG59O1xyXG5cclxuQ29sbGVjdGlvbk9wLnByb3RvdHlwZS5fY29sbGVjdGlvbkdvdCA9IGZ1bmN0aW9uKGNhbGxDb250ZXh0LCByZWFzb24sIHJlc3VsdCkge1xyXG4gICAgaWYgKHJlYXNvbiAhPT0gQWN0aXZpdHkuc3RhdGVzLmNvbXBsZXRlKSB7XHJcbiAgICAgICAgY2FsbENvbnRleHQuZW5kKHJlYXNvbiwgcmVzdWx0KTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5jb2xsZWN0aW9uID0gcmVzdWx0O1xyXG4gICAgY2FsbENvbnRleHQuYWN0aXZpdHkuZG9Xb3JrLmNhbGwodGhpcywgY2FsbENvbnRleHQpO1xyXG59O1xyXG5cclxuQ29sbGVjdGlvbk9wLnByb3RvdHlwZS5kb1dvcmsgPSBmdW5jdGlvbihjYWxsQ29udGV4dCl7XHJcbiAgICBjYWxsQ29udGV4dC5mYWlsKG5ldyBFcnJvcihcIk5vdCBpbXBsZW1lbnRlZC5cIikpO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBDb2xsZWN0aW9uT3A7Il19
