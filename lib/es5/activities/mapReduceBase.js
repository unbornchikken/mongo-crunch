"use strict";
"use strict";
var wf4node = require("../../../deps/workflow-4-node");
var util = require('util');
var Activity = wf4node.activities.Activity;
var CollectionOp = require('./collectionOp');
var _ = require('lodash');
function MapReduceBase() {
  CollectionOp.call(this);
  this.map = null;
  this.reduce = null;
  this.finalize = null;
  this.query = null;
  this.sort = null;
  this.limit = null;
  this.scope = null;
  this.sharded = true;
  this.nonAtomic = false;
  this.codeProperties.add('map');
  this.codeProperties.add('reduce');
  this.codeProperties.add('finalize');
  this.nonScopedProperties.add('map');
  this.nonScopedProperties.add('reduce');
  this.nonScopedProperties.add('finalize');
  this.nonScopedProperties.add('doReduce');
  this.nonScopedProperties.add('sharded');
  this.nonScopedProperties.add('nonAtomic');
}
util.inherits(CollectionOp, Activity);
MapReduceBase.prototype.doWork = function(callContext) {
  callContext.schedule(this.get('query'), this.get('sort'), this.get('limit'), this.get('scope'), '_parsGot');
};
MapReduceBase.prototype._parsGot = function(callContext, reason, result) {
  if (reason !== Activity.states.complete) {
    callContext.end(reason, result);
    return ;
  }
  if (!_.isFunction(this.map) && !_.isString(this.map))
    throw new TypeError("Map function is not a function.");
  if (!_.isFunction(this.reduce) && !_.isString(this.reduce))
    throw new TypeError("Reduce function is not a function.");
  if (this.finalize) {
    if (!_.isFunction(this.finalize) && !_.isString(this.finalize))
      throw new TypeError("Finalize function is not a function.");
  }
  var query = result[0];
  var sort = result[1];
  var limit = result[2];
  var scope = result[3];
  callContext.activity.doReduce.call(this, callContext, {
    query: query,
    sort: sort,
    limit: limit,
    scope: scope,
    out: {
      sharded: this.sharded,
      nonAtomic: this.nonAtomic
    }
  });
};
MapReduceBase.prototype.doReduce = function(callContext, options) {
  callContext.fail(new Error("Not implemented"));
};
module.exports = MapReduceBase;
//# sourceMappingURL=data:application/json;base64,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V0FBVSxDQUFHLENBQUEsT0FBTSxDQUFHO0FBQzlELFlBQVUsS0FBSyxBQUFDLENBQUMsR0FBSSxNQUFJLEFBQUMsQ0FBQyxpQkFBZ0IsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQTtBQUVBLEtBQUssUUFBUSxFQUFJLGNBQVksQ0FBQztBQUM5QiIsImZpbGUiOiJhY3Rpdml0aWVzL21hcFJlZHVjZUJhc2UuanMiLCJzb3VyY2VSb290IjoibGliL2VzNiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxubGV0IHdmNG5vZGUgPSByZXF1aXJlKFwiLi4vLi4vLi4vZGVwcy93b3JrZmxvdy00LW5vZGVcIik7XHJcbmxldCB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xyXG5sZXQgQWN0aXZpdHkgPSB3ZjRub2RlLmFjdGl2aXRpZXMuQWN0aXZpdHk7XHJcbmxldCBDb2xsZWN0aW9uT3AgPSByZXF1aXJlKCcuL2NvbGxlY3Rpb25PcCcpO1xyXG5sZXQgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xyXG5cclxuZnVuY3Rpb24gTWFwUmVkdWNlQmFzZSgpIHtcclxuICAgIENvbGxlY3Rpb25PcC5jYWxsKHRoaXMpO1xyXG5cclxuICAgIHRoaXMubWFwID0gbnVsbDtcclxuICAgIHRoaXMucmVkdWNlID0gbnVsbDtcclxuICAgIHRoaXMuZmluYWxpemUgPSBudWxsO1xyXG4gICAgdGhpcy5xdWVyeSA9IG51bGw7XHJcbiAgICB0aGlzLnNvcnQgPSBudWxsO1xyXG4gICAgdGhpcy5saW1pdCA9IG51bGw7XHJcbiAgICB0aGlzLnNjb3BlID0gbnVsbDtcclxuICAgIHRoaXMuc2hhcmRlZCA9IHRydWU7XHJcbiAgICB0aGlzLm5vbkF0b21pYyA9IGZhbHNlO1xyXG5cclxuICAgIHRoaXMuY29kZVByb3BlcnRpZXMuYWRkKCdtYXAnKTtcclxuICAgIHRoaXMuY29kZVByb3BlcnRpZXMuYWRkKCdyZWR1Y2UnKTtcclxuICAgIHRoaXMuY29kZVByb3BlcnRpZXMuYWRkKCdmaW5hbGl6ZScpO1xyXG4gICAgdGhpcy5ub25TY29wZWRQcm9wZXJ0aWVzLmFkZCgnbWFwJyk7XHJcbiAgICB0aGlzLm5vblNjb3BlZFByb3BlcnRpZXMuYWRkKCdyZWR1Y2UnKTtcclxuICAgIHRoaXMubm9uU2NvcGVkUHJvcGVydGllcy5hZGQoJ2ZpbmFsaXplJyk7XHJcbiAgICB0aGlzLm5vblNjb3BlZFByb3BlcnRpZXMuYWRkKCdkb1JlZHVjZScpO1xyXG4gICAgdGhpcy5ub25TY29wZWRQcm9wZXJ0aWVzLmFkZCgnc2hhcmRlZCcpO1xyXG4gICAgdGhpcy5ub25TY29wZWRQcm9wZXJ0aWVzLmFkZCgnbm9uQXRvbWljJyk7XHJcbn1cclxuXHJcbnV0aWwuaW5oZXJpdHMoQ29sbGVjdGlvbk9wLCBBY3Rpdml0eSk7XHJcblxyXG5NYXBSZWR1Y2VCYXNlLnByb3RvdHlwZS5kb1dvcmsgPSBmdW5jdGlvbihjYWxsQ29udGV4dCkge1xyXG4gICAgY2FsbENvbnRleHQuc2NoZWR1bGUoXHJcbiAgICAgICAgdGhpcy5nZXQoJ3F1ZXJ5JyksXHJcbiAgICAgICAgdGhpcy5nZXQoJ3NvcnQnKSxcclxuICAgICAgICB0aGlzLmdldCgnbGltaXQnKSxcclxuICAgICAgICB0aGlzLmdldCgnc2NvcGUnKSxcclxuICAgICAgICAnX3BhcnNHb3QnXHJcbiAgICApO1xyXG59XHJcblxyXG5NYXBSZWR1Y2VCYXNlLnByb3RvdHlwZS5fcGFyc0dvdCA9IGZ1bmN0aW9uKGNhbGxDb250ZXh0LCByZWFzb24sIHJlc3VsdCkge1xyXG4gICAgaWYgKHJlYXNvbiAhPT0gQWN0aXZpdHkuc3RhdGVzLmNvbXBsZXRlKSB7XHJcbiAgICAgICAgY2FsbENvbnRleHQuZW5kKHJlYXNvbiwgcmVzdWx0KTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFfLmlzRnVuY3Rpb24odGhpcy5tYXApICYmICFfLmlzU3RyaW5nKHRoaXMubWFwKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk1hcCBmdW5jdGlvbiBpcyBub3QgYSBmdW5jdGlvbi5cIik7XHJcbiAgICBpZiAoIV8uaXNGdW5jdGlvbih0aGlzLnJlZHVjZSkgJiYgIV8uaXNTdHJpbmcodGhpcy5yZWR1Y2UpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUmVkdWNlIGZ1bmN0aW9uIGlzIG5vdCBhIGZ1bmN0aW9uLlwiKTtcclxuICAgIGlmICh0aGlzLmZpbmFsaXplKSB7XHJcbiAgICAgICAgaWYgKCFfLmlzRnVuY3Rpb24odGhpcy5maW5hbGl6ZSkgJiYgIV8uaXNTdHJpbmcodGhpcy5maW5hbGl6ZSkpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGaW5hbGl6ZSBmdW5jdGlvbiBpcyBub3QgYSBmdW5jdGlvbi5cIik7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHF1ZXJ5ID0gcmVzdWx0WzBdO1xyXG4gICAgbGV0IHNvcnQgPSByZXN1bHRbMV07XHJcbiAgICBsZXQgbGltaXQgPSByZXN1bHRbMl07XHJcbiAgICBsZXQgc2NvcGUgPSByZXN1bHRbM107XHJcblxyXG4gICAgY2FsbENvbnRleHQuYWN0aXZpdHkuZG9SZWR1Y2UuY2FsbCh0aGlzLCBjYWxsQ29udGV4dCxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeSxcclxuICAgICAgICAgICAgc29ydDogc29ydCxcclxuICAgICAgICAgICAgbGltaXQ6IGxpbWl0LFxyXG4gICAgICAgICAgICBzY29wZTogc2NvcGUsXHJcbiAgICAgICAgICAgIG91dDogeyBzaGFyZGVkOiB0aGlzLnNoYXJkZWQsIG5vbkF0b21pYzogdGhpcy5ub25BdG9taWMgfVxyXG4gICAgICAgIH0pO1xyXG59XHJcblxyXG5NYXBSZWR1Y2VCYXNlLnByb3RvdHlwZS5kb1JlZHVjZSA9IGZ1bmN0aW9uKGNhbGxDb250ZXh0LCBvcHRpb25zKSB7XHJcbiAgICBjYWxsQ29udGV4dC5mYWlsKG5ldyBFcnJvcihcIk5vdCBpbXBsZW1lbnRlZFwiKSk7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gTWFwUmVkdWNlQmFzZTtcclxuIl19
