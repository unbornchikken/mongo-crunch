"use strict";
"use strict";
var MapReduceBase = require('./mapReduceBase');
var util = require('util');
var _ = require('lodash');
var Collection = require('mongodb').Collection;
function MapReduceToCollBase() {
  MapReduceBase.call(this);
  this.toCollection = null;
  this.nonScopedProperties.add('action');
  this.nonScopedProperties.add('doReduceToCollection');
}
util.inherits(MapReduceToCollBase, MapReduceBase);
MapReduceToCollBase.prototype.action = function() {
  throw new Error("Not implemented!");
};
MapReduceToCollBase.prototype.doReduce = function(callContext, options) {
  this.set('_options', options);
  callContext.schedule(this.get('toCollection'), '_toCollectionGot');
};
MapReduceToCollBase.prototype._toCollectionGot = function(callContext, reason, result) {
  if (reason !== Activity.states.complete) {
    callContext.end(reason, result);
    return ;
  }
  var options = this.get('_options');
  if (_.isString(result)) {
    options.out[this.action()] = result;
  } else if (result instanceof Collection) {
    options.out[this.action()] = result.collectionName;
    options.out.db = result.namespace.substr(0, result.namespace.length - (result.collectionName.length + 1));
  } else {
    if (result) {
      callContext.fail(new Error("Invalid toCollection value: " + JSON.stringify(result)));
    } else {
      callContext.fail(new Error("Value of toCollection expected."));
    }
    return ;
  }
  callContext.activity.doReduceToCollection.call(this, callContext, options);
};
MapReduceToCollBase.prototype.doReduceToCollection = function(callContext, options) {
  callContext.fail(new Error("Not implemented!"));
};
module.exports = MapReduceToCollBase;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hcFJlZHVjZVRvQ29sbEJhc2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxXQUFXLENBQUM7QUFFWixBQUFJLEVBQUEsQ0FBQSxhQUFZLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxpQkFBZ0IsQ0FBQyxDQUFDO0FBQzlDLEFBQUksRUFBQSxDQUFBLElBQUcsRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLE1BQUssQ0FBQyxDQUFDO0FBQzFCLEFBQUksRUFBQSxDQUFBLENBQUEsRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLFFBQU8sQ0FBQyxDQUFDO0FBQ3pCLEFBQUksRUFBQSxDQUFBLFVBQVMsRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLFNBQVEsQ0FBQyxXQUFXLENBQUM7QUFFOUMsT0FBUyxvQkFBa0IsQ0FBRSxBQUFELENBQUc7QUFDM0IsY0FBWSxLQUFLLEFBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQztBQUV4QixLQUFHLGFBQWEsRUFBSSxLQUFHLENBQUM7QUFDeEIsS0FBRyxvQkFBb0IsSUFBSSxBQUFDLENBQUMsUUFBTyxDQUFDLENBQUM7QUFDdEMsS0FBRyxvQkFBb0IsSUFBSSxBQUFDLENBQUMsc0JBQXFCLENBQUMsQ0FBQztBQUN4RDtBQUFBLEFBRUEsR0FBRyxTQUFTLEFBQUMsQ0FBQyxtQkFBa0IsQ0FBRyxjQUFZLENBQUMsQ0FBQztBQUVqRCxrQkFBa0IsVUFBVSxPQUFPLEVBQUksVUFBUyxBQUFELENBQUc7QUFFOUMsTUFBTSxJQUFJLE1BQUksQUFBQyxDQUFDLGtCQUFpQixDQUFDLENBQUM7QUFDdkMsQ0FBQTtBQUVBLGtCQUFrQixVQUFVLFNBQVMsRUFBSSxVQUFTLFdBQVUsQ0FBRyxDQUFBLE9BQU0sQ0FBRztBQUNwRSxLQUFHLElBQUksQUFBQyxDQUFDLFVBQVMsQ0FBRyxRQUFNLENBQUMsQ0FBQztBQUM3QixZQUFVLFNBQVMsQUFBQyxDQUFDLElBQUcsSUFBSSxBQUFDLENBQUMsY0FBYSxDQUFDLENBQUcsbUJBQWlCLENBQUMsQ0FBQztBQUN0RSxDQUFBO0FBRUEsa0JBQWtCLFVBQVUsaUJBQWlCLEVBQUksVUFBUyxXQUFVLENBQUcsQ0FBQSxNQUFLLENBQUcsQ0FBQSxNQUFLLENBQUc7QUFDbkYsS0FBSSxNQUFLLElBQU0sQ0FBQSxRQUFPLE9BQU8sU0FBUyxDQUFHO0FBQ3JDLGNBQVUsSUFBSSxBQUFDLENBQUMsTUFBSyxDQUFHLE9BQUssQ0FBQyxDQUFDO0FBQy9CLFdBQU07RUFDVjtBQUFBLEFBRUksSUFBQSxDQUFBLE9BQU0sRUFBSSxDQUFBLElBQUcsSUFBSSxBQUFDLENBQUMsVUFBUyxDQUFDLENBQUM7QUFDbEMsS0FBSSxDQUFBLFNBQVMsQUFBQyxDQUFDLE1BQUssQ0FBQyxDQUFHO0FBQ3BCLFVBQU0sSUFBSSxDQUFFLElBQUcsT0FBTyxBQUFDLEVBQUMsQ0FBQyxFQUFJLE9BQUssQ0FBQztFQUN2QyxLQUNLLEtBQUksTUFBSyxXQUFhLFdBQVMsQ0FBRztBQUNuQyxVQUFNLElBQUksQ0FBRSxJQUFHLE9BQU8sQUFBQyxFQUFDLENBQUMsRUFBSSxDQUFBLE1BQUssZUFBZSxDQUFDO0FBQ2xELFVBQU0sSUFBSSxHQUFHLEVBQUksQ0FBQSxNQUFLLFVBQVUsT0FBTyxBQUFDLENBQUMsQ0FBQSxDQUFHLENBQUEsTUFBSyxVQUFVLE9BQU8sRUFBSSxFQUFDLE1BQUssZUFBZSxPQUFPLEVBQUksRUFBQSxDQUFDLENBQUMsQ0FBQztFQUM3RyxLQUNLO0FBQ0QsT0FBSSxNQUFLLENBQUc7QUFDUixnQkFBVSxLQUFLLEFBQUMsQ0FBQyxHQUFJLE1BQUksQUFBQyxDQUFDLDhCQUE2QixFQUFJLENBQUEsSUFBRyxVQUFVLEFBQUMsQ0FBQyxNQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEYsS0FDSztBQUNELGdCQUFVLEtBQUssQUFBQyxDQUFDLEdBQUksTUFBSSxBQUFDLENBQUMsaUNBQWdDLENBQUMsQ0FBQyxDQUFDO0lBQ2xFO0FBQUEsQUFDQSxXQUFNO0VBQ1Y7QUFBQSxBQUVBLFlBQVUsU0FBUyxxQkFBcUIsS0FBSyxBQUFDLENBQUMsSUFBRyxDQUFHLFlBQVUsQ0FBRyxRQUFNLENBQUMsQ0FBQztBQUM5RSxDQUFBO0FBRUEsa0JBQWtCLFVBQVUscUJBQXFCLEVBQUksVUFBUyxXQUFVLENBQUcsQ0FBQSxPQUFNLENBQUc7QUFDaEYsWUFBVSxLQUFLLEFBQUMsQ0FBQyxHQUFJLE1BQUksQUFBQyxDQUFDLGtCQUFpQixDQUFDLENBQUMsQ0FBQztBQUNuRCxDQUFBO0FBRUEsS0FBSyxRQUFRLEVBQUksb0JBQWtCLENBQUM7QUFDcEMiLCJmaWxlIjoiYWN0aXZpdGllcy9tYXBSZWR1Y2VUb0NvbGxCYXNlLmpzIiwic291cmNlUm9vdCI6IkM6L0dJVC9tb25nby1jcnVuY2gvbGliLyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxubGV0IE1hcFJlZHVjZUJhc2UgPSByZXF1aXJlKCcuL21hcFJlZHVjZUJhc2UnKTtcclxubGV0IHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XHJcbmxldCBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XHJcbmxldCBDb2xsZWN0aW9uID0gcmVxdWlyZSgnbW9uZ29kYicpLkNvbGxlY3Rpb247XHJcblxyXG5mdW5jdGlvbiBNYXBSZWR1Y2VUb0NvbGxCYXNlKCkge1xyXG4gICAgTWFwUmVkdWNlQmFzZS5jYWxsKHRoaXMpO1xyXG5cclxuICAgIHRoaXMudG9Db2xsZWN0aW9uID0gbnVsbDtcclxuICAgIHRoaXMubm9uU2NvcGVkUHJvcGVydGllcy5hZGQoJ2FjdGlvbicpO1xyXG4gICAgdGhpcy5ub25TY29wZWRQcm9wZXJ0aWVzLmFkZCgnZG9SZWR1Y2VUb0NvbGxlY3Rpb24nKTtcclxufVxyXG5cclxudXRpbC5pbmhlcml0cyhNYXBSZWR1Y2VUb0NvbGxCYXNlLCBNYXBSZWR1Y2VCYXNlKTtcclxuXHJcbk1hcFJlZHVjZVRvQ29sbEJhc2UucHJvdG90eXBlLmFjdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gRGVzY2VuZGFudHMgc2hvdWxkIG92ZXJyaWRlIHRoaXMgb25seSAuLi5cclxuICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCBpbXBsZW1lbnRlZCFcIik7XHJcbn1cclxuXHJcbk1hcFJlZHVjZVRvQ29sbEJhc2UucHJvdG90eXBlLmRvUmVkdWNlID0gZnVuY3Rpb24oY2FsbENvbnRleHQsIG9wdGlvbnMpIHtcclxuICAgIHRoaXMuc2V0KCdfb3B0aW9ucycsIG9wdGlvbnMpO1xyXG4gICAgY2FsbENvbnRleHQuc2NoZWR1bGUodGhpcy5nZXQoJ3RvQ29sbGVjdGlvbicpLCAnX3RvQ29sbGVjdGlvbkdvdCcpO1xyXG59XHJcblxyXG5NYXBSZWR1Y2VUb0NvbGxCYXNlLnByb3RvdHlwZS5fdG9Db2xsZWN0aW9uR290ID0gZnVuY3Rpb24oY2FsbENvbnRleHQsIHJlYXNvbiwgcmVzdWx0KSB7XHJcbiAgICBpZiAocmVhc29uICE9PSBBY3Rpdml0eS5zdGF0ZXMuY29tcGxldGUpIHtcclxuICAgICAgICBjYWxsQ29udGV4dC5lbmQocmVhc29uLCByZXN1bHQpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgb3B0aW9ucyA9IHRoaXMuZ2V0KCdfb3B0aW9ucycpO1xyXG4gICAgaWYgKF8uaXNTdHJpbmcocmVzdWx0KSkge1xyXG4gICAgICAgIG9wdGlvbnMub3V0W3RoaXMuYWN0aW9uKCldID0gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAocmVzdWx0IGluc3RhbmNlb2YgQ29sbGVjdGlvbikge1xyXG4gICAgICAgIG9wdGlvbnMub3V0W3RoaXMuYWN0aW9uKCldID0gcmVzdWx0LmNvbGxlY3Rpb25OYW1lO1xyXG4gICAgICAgIG9wdGlvbnMub3V0LmRiID0gcmVzdWx0Lm5hbWVzcGFjZS5zdWJzdHIoMCwgcmVzdWx0Lm5hbWVzcGFjZS5sZW5ndGggLSAocmVzdWx0LmNvbGxlY3Rpb25OYW1lLmxlbmd0aCArIDEpKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGlmIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgY2FsbENvbnRleHQuZmFpbChuZXcgRXJyb3IoXCJJbnZhbGlkIHRvQ29sbGVjdGlvbiB2YWx1ZTogXCIgKyBKU09OLnN0cmluZ2lmeShyZXN1bHQpKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjYWxsQ29udGV4dC5mYWlsKG5ldyBFcnJvcihcIlZhbHVlIG9mIHRvQ29sbGVjdGlvbiBleHBlY3RlZC5cIikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY2FsbENvbnRleHQuYWN0aXZpdHkuZG9SZWR1Y2VUb0NvbGxlY3Rpb24uY2FsbCh0aGlzLCBjYWxsQ29udGV4dCwgb3B0aW9ucyk7XHJcbn1cclxuXHJcbk1hcFJlZHVjZVRvQ29sbEJhc2UucHJvdG90eXBlLmRvUmVkdWNlVG9Db2xsZWN0aW9uID0gZnVuY3Rpb24oY2FsbENvbnRleHQsIG9wdGlvbnMpIHtcclxuICAgIGNhbGxDb250ZXh0LmZhaWwobmV3IEVycm9yKFwiTm90IGltcGxlbWVudGVkIVwiKSk7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gTWFwUmVkdWNlVG9Db2xsQmFzZTtcclxuIl19
