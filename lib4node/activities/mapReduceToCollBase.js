"use strict";
var MapReduceBase = require('./mapReduceBase');
var util = require('util');
var _ = require('lodash');
var Collection = require('mongodb').Collection;
function MapReduceToCollBase() {
  MapReduceBase.call(this);
  this.toCollection = null;
  this.nonScopedProperties.add('action');
  this.nonScopedProperties.add('doReduceToCollection');
}
util.inherits(MapReduceToCollBase, MapReduceBase);
MapReduceToCollBase.prototype.action = function() {
  throw new Error("Not implemented!");
};
MapReduceToCollBase.prototype.doReduce = function(callContext, options) {
  this.set('_options', options);
  callContext.schedule(this.get('toCollection'), '_toCollectionGot');
};
MapReduceToCollBase.prototype._toCollectionGot = function(callContext, reason, result) {
  if (reason !== Activity.states.complete) {
    callContext.end(reason, result);
    return ;
  }
  var options = this.get('_options');
  if (_.isString(result)) {
    options.out[this.action()] = result;
  } else if (result instanceof Collection) {
    options.out[this.action()] = result.collectionName;
    options.out.db = result.namespace.substr(0, result.namespace.length - (result.collectionName.length + 1));
  } else {
    if (result) {
      callContext.fail(new Error("Invalid toCollection value: " + JSON.stringify(result)));
    } else {
      callContext.fail(new Error("Value of toCollection expected."));
    }
    return ;
  }
  callContext.activity.doReduceToCollection.call(this, callContext, options);
};
MapReduceToCollBase.prototype.doReduceToCollection = function(callContext, options) {
  callContext.fail(new Error("Not implemented!"));
};
module.exports = MapReduceToCollBase;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hcFJlZHVjZVRvQ29sbEJhc2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxBQUFJLEVBQUEsQ0FBQSxhQUFZLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxpQkFBZ0IsQ0FBQyxDQUFDO0FBQzlDLEFBQUksRUFBQSxDQUFBLElBQUcsRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLE1BQUssQ0FBQyxDQUFDO0FBQzFCLEFBQUksRUFBQSxDQUFBLENBQUEsRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLFFBQU8sQ0FBQyxDQUFDO0FBQ3pCLEFBQUksRUFBQSxDQUFBLFVBQVMsRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLFNBQVEsQ0FBQyxXQUFXLENBQUM7QUFFOUMsT0FBUyxvQkFBa0IsQ0FBRSxBQUFELENBQUc7QUFDM0IsY0FBWSxLQUFLLEFBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQztBQUV4QixLQUFHLGFBQWEsRUFBSSxLQUFHLENBQUM7QUFDeEIsS0FBRyxvQkFBb0IsSUFBSSxBQUFDLENBQUMsUUFBTyxDQUFDLENBQUM7QUFDdEMsS0FBRyxvQkFBb0IsSUFBSSxBQUFDLENBQUMsc0JBQXFCLENBQUMsQ0FBQztBQUN4RDtBQUFBLEFBRUEsR0FBRyxTQUFTLEFBQUMsQ0FBQyxtQkFBa0IsQ0FBRyxjQUFZLENBQUMsQ0FBQztBQUVqRCxrQkFBa0IsVUFBVSxPQUFPLEVBQUksVUFBUyxBQUFELENBQUc7QUFFOUMsTUFBTSxJQUFJLE1BQUksQUFBQyxDQUFDLGtCQUFpQixDQUFDLENBQUM7QUFDdkMsQ0FBQTtBQUVBLGtCQUFrQixVQUFVLFNBQVMsRUFBSSxVQUFTLFdBQVUsQ0FBRyxDQUFBLE9BQU0sQ0FBRztBQUNwRSxLQUFHLElBQUksQUFBQyxDQUFDLFVBQVMsQ0FBRyxRQUFNLENBQUMsQ0FBQztBQUM3QixZQUFVLFNBQVMsQUFBQyxDQUFDLElBQUcsSUFBSSxBQUFDLENBQUMsY0FBYSxDQUFDLENBQUcsbUJBQWlCLENBQUMsQ0FBQztBQUN0RSxDQUFBO0FBRUEsa0JBQWtCLFVBQVUsaUJBQWlCLEVBQUksVUFBUyxXQUFVLENBQUcsQ0FBQSxNQUFLLENBQUcsQ0FBQSxNQUFLLENBQUc7QUFDbkYsS0FBSSxNQUFLLElBQU0sQ0FBQSxRQUFPLE9BQU8sU0FBUyxDQUFHO0FBQ3JDLGNBQVUsSUFBSSxBQUFDLENBQUMsTUFBSyxDQUFHLE9BQUssQ0FBQyxDQUFDO0FBQy9CLFdBQU07RUFDVjtBQUFBLEFBRUksSUFBQSxDQUFBLE9BQU0sRUFBSSxDQUFBLElBQUcsSUFBSSxBQUFDLENBQUMsVUFBUyxDQUFDLENBQUM7QUFDbEMsS0FBSSxDQUFBLFNBQVMsQUFBQyxDQUFDLE1BQUssQ0FBQyxDQUFHO0FBQ3BCLFVBQU0sSUFBSSxDQUFFLElBQUcsT0FBTyxBQUFDLEVBQUMsQ0FBQyxFQUFJLE9BQUssQ0FBQztFQUN2QyxLQUNLLEtBQUksTUFBSyxXQUFhLFdBQVMsQ0FBRztBQUNuQyxVQUFNLElBQUksQ0FBRSxJQUFHLE9BQU8sQUFBQyxFQUFDLENBQUMsRUFBSSxDQUFBLE1BQUssZUFBZSxDQUFDO0FBQ2xELFVBQU0sSUFBSSxHQUFHLEVBQUksQ0FBQSxNQUFLLFVBQVUsT0FBTyxBQUFDLENBQUMsQ0FBQSxDQUFHLENBQUEsTUFBSyxVQUFVLE9BQU8sRUFBSSxFQUFDLE1BQUssZUFBZSxPQUFPLEVBQUksRUFBQSxDQUFDLENBQUMsQ0FBQztFQUM3RyxLQUNLO0FBQ0QsT0FBSSxNQUFLLENBQUc7QUFDUixnQkFBVSxLQUFLLEFBQUMsQ0FBQyxHQUFJLE1BQUksQUFBQyxDQUFDLDhCQUE2QixFQUFJLENBQUEsSUFBRyxVQUFVLEFBQUMsQ0FBQyxNQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEYsS0FDSztBQUNELGdCQUFVLEtBQUssQUFBQyxDQUFDLEdBQUksTUFBSSxBQUFDLENBQUMsaUNBQWdDLENBQUMsQ0FBQyxDQUFDO0lBQ2xFO0FBQUEsQUFDQSxXQUFNO0VBQ1Y7QUFBQSxBQUVBLFlBQVUsU0FBUyxxQkFBcUIsS0FBSyxBQUFDLENBQUMsSUFBRyxDQUFHLFlBQVUsQ0FBRyxRQUFNLENBQUMsQ0FBQztBQUM5RSxDQUFBO0FBRUEsa0JBQWtCLFVBQVUscUJBQXFCLEVBQUksVUFBUyxXQUFVLENBQUcsQ0FBQSxPQUFNLENBQUc7QUFDaEYsWUFBVSxLQUFLLEFBQUMsQ0FBQyxHQUFJLE1BQUksQUFBQyxDQUFDLGtCQUFpQixDQUFDLENBQUMsQ0FBQztBQUNuRCxDQUFBO0FBRUEsS0FBSyxRQUFRLEVBQUksb0JBQWtCLENBQUM7QUFDcEMiLCJmaWxlIjoiYWN0aXZpdGllcy9tYXBSZWR1Y2VUb0NvbGxCYXNlLmpzIiwic291cmNlUm9vdCI6IkM6L0dJVC9tb25nby1jcnVuY2gvbGliLyIsInNvdXJjZXNDb250ZW50IjpbInZhciBNYXBSZWR1Y2VCYXNlID0gcmVxdWlyZSgnLi9tYXBSZWR1Y2VCYXNlJyk7XHJcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xyXG52YXIgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xyXG52YXIgQ29sbGVjdGlvbiA9IHJlcXVpcmUoJ21vbmdvZGInKS5Db2xsZWN0aW9uO1xyXG5cclxuZnVuY3Rpb24gTWFwUmVkdWNlVG9Db2xsQmFzZSgpIHtcclxuICAgIE1hcFJlZHVjZUJhc2UuY2FsbCh0aGlzKTtcclxuXHJcbiAgICB0aGlzLnRvQ29sbGVjdGlvbiA9IG51bGw7XHJcbiAgICB0aGlzLm5vblNjb3BlZFByb3BlcnRpZXMuYWRkKCdhY3Rpb24nKTtcclxuICAgIHRoaXMubm9uU2NvcGVkUHJvcGVydGllcy5hZGQoJ2RvUmVkdWNlVG9Db2xsZWN0aW9uJyk7XHJcbn1cclxuXHJcbnV0aWwuaW5oZXJpdHMoTWFwUmVkdWNlVG9Db2xsQmFzZSwgTWFwUmVkdWNlQmFzZSk7XHJcblxyXG5NYXBSZWR1Y2VUb0NvbGxCYXNlLnByb3RvdHlwZS5hY3Rpb24gPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIERlc2NlbmRhbnRzIHNob3VsZCBvdmVycmlkZSB0aGlzIG9ubHkgLi4uXHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb3QgaW1wbGVtZW50ZWQhXCIpO1xyXG59XHJcblxyXG5NYXBSZWR1Y2VUb0NvbGxCYXNlLnByb3RvdHlwZS5kb1JlZHVjZSA9IGZ1bmN0aW9uKGNhbGxDb250ZXh0LCBvcHRpb25zKSB7XHJcbiAgICB0aGlzLnNldCgnX29wdGlvbnMnLCBvcHRpb25zKTtcclxuICAgIGNhbGxDb250ZXh0LnNjaGVkdWxlKHRoaXMuZ2V0KCd0b0NvbGxlY3Rpb24nKSwgJ190b0NvbGxlY3Rpb25Hb3QnKTtcclxufVxyXG5cclxuTWFwUmVkdWNlVG9Db2xsQmFzZS5wcm90b3R5cGUuX3RvQ29sbGVjdGlvbkdvdCA9IGZ1bmN0aW9uKGNhbGxDb250ZXh0LCByZWFzb24sIHJlc3VsdCkge1xyXG4gICAgaWYgKHJlYXNvbiAhPT0gQWN0aXZpdHkuc3RhdGVzLmNvbXBsZXRlKSB7XHJcbiAgICAgICAgY2FsbENvbnRleHQuZW5kKHJlYXNvbiwgcmVzdWx0KTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIG9wdGlvbnMgPSB0aGlzLmdldCgnX29wdGlvbnMnKTtcclxuICAgIGlmIChfLmlzU3RyaW5nKHJlc3VsdCkpIHtcclxuICAgICAgICBvcHRpb25zLm91dFt0aGlzLmFjdGlvbigpXSA9IHJlc3VsdDtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIENvbGxlY3Rpb24pIHtcclxuICAgICAgICBvcHRpb25zLm91dFt0aGlzLmFjdGlvbigpXSA9IHJlc3VsdC5jb2xsZWN0aW9uTmFtZTtcclxuICAgICAgICBvcHRpb25zLm91dC5kYiA9IHJlc3VsdC5uYW1lc3BhY2Uuc3Vic3RyKDAsIHJlc3VsdC5uYW1lc3BhY2UubGVuZ3RoIC0gKHJlc3VsdC5jb2xsZWN0aW9uTmFtZS5sZW5ndGggKyAxKSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBpZiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgIGNhbGxDb250ZXh0LmZhaWwobmV3IEVycm9yKFwiSW52YWxpZCB0b0NvbGxlY3Rpb24gdmFsdWU6IFwiICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0KSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY2FsbENvbnRleHQuZmFpbChuZXcgRXJyb3IoXCJWYWx1ZSBvZiB0b0NvbGxlY3Rpb24gZXhwZWN0ZWQuXCIpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbGxDb250ZXh0LmFjdGl2aXR5LmRvUmVkdWNlVG9Db2xsZWN0aW9uLmNhbGwodGhpcywgY2FsbENvbnRleHQsIG9wdGlvbnMpO1xyXG59XHJcblxyXG5NYXBSZWR1Y2VUb0NvbGxCYXNlLnByb3RvdHlwZS5kb1JlZHVjZVRvQ29sbGVjdGlvbiA9IGZ1bmN0aW9uKGNhbGxDb250ZXh0LCBvcHRpb25zKSB7XHJcbiAgICBjYWxsQ29udGV4dC5mYWlsKG5ldyBFcnJvcihcIk5vdCBpbXBsZW1lbnRlZCFcIikpO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IE1hcFJlZHVjZVRvQ29sbEJhc2U7XHJcbiJdfQ==
