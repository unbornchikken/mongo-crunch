"use strict";
"use strict";
var util = require('util');
var Activity = require("../../deps/workflow-4-node").activities.Activity;
var CollectionOp = require('./collectionOp');
var _ = require('lodash');
function MapReduceBase() {
  CollectionOp.call(this);
  this.map = null;
  this.reduce = null;
  this.finalize = null;
  this.query = null;
  this.sort = null;
  this.limit = null;
  this.scope = null;
  this.sharded = true;
  this.nonAtomic = false;
  this.codeProperties.add('map');
  this.codeProperties.add('reduce');
  this.codeProperties.add('finalize');
  this.nonScopedProperties.add('map');
  this.nonScopedProperties.add('reduce');
  this.nonScopedProperties.add('finalize');
  this.nonScopedProperties.add('doReduce');
  this.nonScopedProperties.add('sharded');
  this.nonScopedProperties.add('nonAtomic');
}
util.inherits(CollectionOp, Activity);
MapReduceBase.prototype.doWork = function(callContext) {
  callContext.schedule(this.get('query'), this.get('sort'), this.get('limit'), this.get('scope'), '_parsGot');
};
MapReduceBase.prototype._parsGot = function(callContext, reason, result) {
  if (reason !== Activity.states.complete) {
    callContext.end(reason, result);
    return ;
  }
  if (!_.isFunction(this.map) && !_.isString(this.map))
    throw new TypeError("Map function is not a function.");
  if (!_.isFunction(this.reduce) && !_.isString(this.reduce))
    throw new TypeError("Reduce function is not a function.");
  if (this.finalize) {
    if (!_.isFunction(this.finalize) && !_.isString(this.finalize))
      throw new TypeError("Finalize function is not a function.");
  }
  var query = result[0];
  var sort = result[1];
  var limit = result[2];
  var scope = result[3];
  callContext.activity.doReduce.call(this, callContext, {
    query: query,
    sort: sort,
    limit: limit,
    scope: scope,
    out: {
      sharded: this.sharded,
      nonAtomic: this.nonAtomic
    }
  });
};
MapReduceBase.prototype.doReduce = function(callContext, options) {
  callContext.fail(new Error("Not implemented"));
};
module.exports = MapReduceBase;
//# sourceMappingURL=data:application/json;base64,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Q0FBQyxHQUFJLE1BQUksQUFBQyxDQUFDLGlCQUFnQixDQUFDLENBQUMsQ0FBQztBQUNsRCxDQUFBO0FBRUEsS0FBSyxRQUFRLEVBQUksY0FBWSxDQUFDO0FBQzlCIiwiZmlsZSI6ImFjdGl2aXRpZXMvbWFwUmVkdWNlQmFzZS5qcyIsInNvdXJjZVJvb3QiOiJDOi9HSVQvbW9uZ28tY3J1bmNoL2xpYi8iLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmxldCB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xyXG5sZXQgQWN0aXZpdHkgPSByZXF1aXJlKFwiLi4vLi4vZGVwcy93b3JrZmxvdy00LW5vZGVcIikuYWN0aXZpdGllcy5BY3Rpdml0eTtcclxubGV0IENvbGxlY3Rpb25PcCA9IHJlcXVpcmUoJy4vY29sbGVjdGlvbk9wJyk7XHJcbmxldCBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XHJcblxyXG5mdW5jdGlvbiBNYXBSZWR1Y2VCYXNlKCkge1xyXG4gICAgQ29sbGVjdGlvbk9wLmNhbGwodGhpcyk7XHJcblxyXG4gICAgdGhpcy5tYXAgPSBudWxsO1xyXG4gICAgdGhpcy5yZWR1Y2UgPSBudWxsO1xyXG4gICAgdGhpcy5maW5hbGl6ZSA9IG51bGw7XHJcbiAgICB0aGlzLnF1ZXJ5ID0gbnVsbDtcclxuICAgIHRoaXMuc29ydCA9IG51bGw7XHJcbiAgICB0aGlzLmxpbWl0ID0gbnVsbDtcclxuICAgIHRoaXMuc2NvcGUgPSBudWxsO1xyXG4gICAgdGhpcy5zaGFyZGVkID0gdHJ1ZTtcclxuICAgIHRoaXMubm9uQXRvbWljID0gZmFsc2U7XHJcblxyXG4gICAgdGhpcy5jb2RlUHJvcGVydGllcy5hZGQoJ21hcCcpO1xyXG4gICAgdGhpcy5jb2RlUHJvcGVydGllcy5hZGQoJ3JlZHVjZScpO1xyXG4gICAgdGhpcy5jb2RlUHJvcGVydGllcy5hZGQoJ2ZpbmFsaXplJyk7XHJcbiAgICB0aGlzLm5vblNjb3BlZFByb3BlcnRpZXMuYWRkKCdtYXAnKTtcclxuICAgIHRoaXMubm9uU2NvcGVkUHJvcGVydGllcy5hZGQoJ3JlZHVjZScpO1xyXG4gICAgdGhpcy5ub25TY29wZWRQcm9wZXJ0aWVzLmFkZCgnZmluYWxpemUnKTtcclxuICAgIHRoaXMubm9uU2NvcGVkUHJvcGVydGllcy5hZGQoJ2RvUmVkdWNlJyk7XHJcbiAgICB0aGlzLm5vblNjb3BlZFByb3BlcnRpZXMuYWRkKCdzaGFyZGVkJyk7XHJcbiAgICB0aGlzLm5vblNjb3BlZFByb3BlcnRpZXMuYWRkKCdub25BdG9taWMnKTtcclxufVxyXG5cclxudXRpbC5pbmhlcml0cyhDb2xsZWN0aW9uT3AsIEFjdGl2aXR5KTtcclxuXHJcbk1hcFJlZHVjZUJhc2UucHJvdG90eXBlLmRvV29yayA9IGZ1bmN0aW9uKGNhbGxDb250ZXh0KSB7XHJcbiAgICBjYWxsQ29udGV4dC5zY2hlZHVsZShcclxuICAgICAgICB0aGlzLmdldCgncXVlcnknKSxcclxuICAgICAgICB0aGlzLmdldCgnc29ydCcpLFxyXG4gICAgICAgIHRoaXMuZ2V0KCdsaW1pdCcpLFxyXG4gICAgICAgIHRoaXMuZ2V0KCdzY29wZScpLFxyXG4gICAgICAgICdfcGFyc0dvdCdcclxuICAgICk7XHJcbn1cclxuXHJcbk1hcFJlZHVjZUJhc2UucHJvdG90eXBlLl9wYXJzR290ID0gZnVuY3Rpb24oY2FsbENvbnRleHQsIHJlYXNvbiwgcmVzdWx0KSB7XHJcbiAgICBpZiAocmVhc29uICE9PSBBY3Rpdml0eS5zdGF0ZXMuY29tcGxldGUpIHtcclxuICAgICAgICBjYWxsQ29udGV4dC5lbmQocmVhc29uLCByZXN1bHQpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIV8uaXNGdW5jdGlvbih0aGlzLm1hcCkgJiYgIV8uaXNTdHJpbmcodGhpcy5tYXApKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTWFwIGZ1bmN0aW9uIGlzIG5vdCBhIGZ1bmN0aW9uLlwiKTtcclxuICAgIGlmICghXy5pc0Z1bmN0aW9uKHRoaXMucmVkdWNlKSAmJiAhXy5pc1N0cmluZyh0aGlzLnJlZHVjZSkpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJSZWR1Y2UgZnVuY3Rpb24gaXMgbm90IGEgZnVuY3Rpb24uXCIpO1xyXG4gICAgaWYgKHRoaXMuZmluYWxpemUpIHtcclxuICAgICAgICBpZiAoIV8uaXNGdW5jdGlvbih0aGlzLmZpbmFsaXplKSAmJiAhXy5pc1N0cmluZyh0aGlzLmZpbmFsaXplKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZpbmFsaXplIGZ1bmN0aW9uIGlzIG5vdCBhIGZ1bmN0aW9uLlwiKTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgcXVlcnkgPSByZXN1bHRbMF07XHJcbiAgICBsZXQgc29ydCA9IHJlc3VsdFsxXTtcclxuICAgIGxldCBsaW1pdCA9IHJlc3VsdFsyXTtcclxuICAgIGxldCBzY29wZSA9IHJlc3VsdFszXTtcclxuXHJcbiAgICBjYWxsQ29udGV4dC5hY3Rpdml0eS5kb1JlZHVjZS5jYWxsKHRoaXMsIGNhbGxDb250ZXh0LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcXVlcnk6IHF1ZXJ5LFxyXG4gICAgICAgICAgICBzb3J0OiBzb3J0LFxyXG4gICAgICAgICAgICBsaW1pdDogbGltaXQsXHJcbiAgICAgICAgICAgIHNjb3BlOiBzY29wZSxcclxuICAgICAgICAgICAgb3V0OiB7IHNoYXJkZWQ6IHRoaXMuc2hhcmRlZCwgbm9uQXRvbWljOiB0aGlzLm5vbkF0b21pYyB9XHJcbiAgICAgICAgfSk7XHJcbn1cclxuXHJcbk1hcFJlZHVjZUJhc2UucHJvdG90eXBlLmRvUmVkdWNlID0gZnVuY3Rpb24oY2FsbENvbnRleHQsIG9wdGlvbnMpIHtcclxuICAgIGNhbGxDb250ZXh0LmZhaWwobmV3IEVycm9yKFwiTm90IGltcGxlbWVudGVkXCIpKTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBNYXBSZWR1Y2VCYXNlO1xyXG4iXX0=
