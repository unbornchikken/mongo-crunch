"use strict";
"use strict";
var util = require("util");
var Modify = require("./modify");
var Activity = require("../../deps/workflow-4-node").activities.Activity;
var debug = require("debug")("mongo-crunch:Insert");
var Bluebird = require("bluebird");
var p = Bluebird.promisify;
function Insert() {
  Modify.call(this);
  this.documents = null;
}
util.inherits(Insert, Modify);
Insert.prototype.doWork = function(callContext) {
  debug("Scheduling documents.");
  callContext.schedule(this.get("documents"), "_documentsGot");
};
Insert.prototype._documentsGot = function(callContext, reason, result) {
  if (reason === Activity.states.complete) {
    if (result) {
      if (_.isArray(result)) {
        if (result.length) {
          var coll = callContext.activity.getCollection(this);
          var options = this.getOptions();
          debug(("Inserting " + result.length + " documents."));
          debug(("Options: " + options));
          p(coll.insertMany, coll)(result, options).then(function(r) {
            debug(("Insert completed. Result: " + r));
            callContext.complete(r);
          }).catch(function(e) {
            callContext.fail(e);
          });
          return ;
        }
      } else if (_.isPlainObject(result)) {
        var coll$__0 = callContext.activity.getCollection(this);
        var options$__1 = this.getOptions();
        debug(("Inserting a document: " + result));
        debug(("Options: " + options$__1));
        p(coll$__0.insertOne, coll$__0)(result, options$__1).then(function(r) {
          debug(("Insert completed. Result: " + r));
          callContext.complete(r);
        }).catch(function(e) {
          callContext.fail(e);
        });
        return ;
      } else {
        callContext.fail(new Error(("Unknown type of documents property: " + typeof result + ".")));
      }
    }
    debug("No documents, ending.");
    callContext.end(reason);
  } else {
    callContext.end(reason, result);
  }
};
module.exports = Insert;
//# sourceMappingURL=data:application/json;base64,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QUFDLHdCQUF3QixFQUFDLE9BQUssRUFBRyxDQUFDO0FBQ3hDLFlBQUksQUFBQyxFQUFDLFdBQVcsZ0JBQVUsQ0FBQztBQUM1QixRQUFBLEFBQUMsQ0FBQyxrQkFBYSxXQUFPLEFBQUMsQ0FBQyxNQUFLLGNBQVUsS0FDL0IsQUFBQyxDQUFDLFNBQVMsQ0FBQSxDQUFHO0FBQ2QsY0FBSSxBQUFDLEVBQUMsNEJBQTRCLEVBQUMsRUFBQSxFQUFHLENBQUM7QUFDdkMsb0JBQVUsU0FBUyxBQUFDLENBQUMsQ0FBQSxDQUFDLENBQUM7UUFDM0IsQ0FBQyxNQUNJLEFBQUMsQ0FBQyxTQUFTLENBQUEsQ0FBRztBQUNmLG9CQUFVLEtBQUssQUFBQyxDQUFDLENBQUEsQ0FBQyxDQUFDO1FBQ3ZCLENBQUMsQ0FBQztBQUNOLGVBQU07TUFDVixLQUNLO0FBQ0Qsa0JBQVUsS0FBSyxBQUFDLENBQUMsR0FBSSxNQUFJLEFBQUMsRUFBQyxzQ0FBc0MsRUFBQyxPQUFPLE9BQUssQ0FBQSxDQUFDLElBQUUsRUFBQyxDQUFDLENBQUM7TUFDeEY7QUFBQSxJQUNKO0FBQUEsQUFDQSxRQUFJLEFBQUMsQ0FBQyx1QkFBc0IsQ0FBQyxDQUFDO0FBQzlCLGNBQVUsSUFBSSxBQUFDLENBQUMsTUFBSyxDQUFDLENBQUM7RUFDM0IsS0FDSztBQUNELGNBQVUsSUFBSSxBQUFDLENBQUMsTUFBSyxDQUFHLE9BQUssQ0FBQyxDQUFDO0VBQ25DO0FBQUEsQUFDSixDQUFDO0FBRUQsS0FBSyxRQUFRLEVBQUksT0FBSyxDQUFDO0FBQUEiLCJmaWxlIjoiYWN0aXZpdGllcy9pbnNlcnQuanMiLCJzb3VyY2VSb290IjoiQzovR0lUL21vbmdvLWNydW5jaC9saWIvIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5sZXQgdXRpbCA9IHJlcXVpcmUoXCJ1dGlsXCIpO1xyXG5sZXQgTW9kaWZ5ID0gcmVxdWlyZShcIi4vbW9kaWZ5XCIpO1xyXG5sZXQgQWN0aXZpdHkgPSByZXF1aXJlKFwiLi4vLi4vZGVwcy93b3JrZmxvdy00LW5vZGVcIikuYWN0aXZpdGllcy5BY3Rpdml0eTtcclxubGV0IGRlYnVnID0gcmVxdWlyZShcImRlYnVnXCIpKFwibW9uZ28tY3J1bmNoOkluc2VydFwiKTtcclxubGV0IEJsdWViaXJkID0gcmVxdWlyZShcImJsdWViaXJkXCIpO1xyXG5sZXQgcCA9IEJsdWViaXJkLnByb21pc2lmeTtcclxuXHJcbmZ1bmN0aW9uIEluc2VydCgpIHtcclxuICAgIE1vZGlmeS5jYWxsKHRoaXMpO1xyXG5cclxuICAgIHRoaXMuZG9jdW1lbnRzID0gbnVsbDtcclxufVxyXG5cclxudXRpbC5pbmhlcml0cyhJbnNlcnQsIE1vZGlmeSk7XHJcblxyXG5JbnNlcnQucHJvdG90eXBlLmRvV29yayA9IGZ1bmN0aW9uIChjYWxsQ29udGV4dCkge1xyXG4gICAgZGVidWcoXCJTY2hlZHVsaW5nIGRvY3VtZW50cy5cIik7XHJcbiAgICBjYWxsQ29udGV4dC5zY2hlZHVsZSh0aGlzLmdldChcImRvY3VtZW50c1wiKSwgXCJfZG9jdW1lbnRzR290XCIpO1xyXG59O1xyXG5cclxuSW5zZXJ0LnByb3RvdHlwZS5fZG9jdW1lbnRzR290ID0gZnVuY3Rpb24gKGNhbGxDb250ZXh0LCByZWFzb24sIHJlc3VsdCkge1xyXG4gICAgaWYgKHJlYXNvbiA9PT0gQWN0aXZpdHkuc3RhdGVzLmNvbXBsZXRlKSB7XHJcbiAgICAgICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICAgICAgICBpZiAoXy5pc0FycmF5KHJlc3VsdCkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbGwgPSBjYWxsQ29udGV4dC5hY3Rpdml0eS5nZXRDb2xsZWN0aW9uKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBvcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVidWcoYEluc2VydGluZyAke3Jlc3VsdC5sZW5ndGh9IGRvY3VtZW50cy5gKTtcclxuICAgICAgICAgICAgICAgICAgICBkZWJ1ZyhgT3B0aW9uczogJHtvcHRpb25zfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIHAoY29sbC5pbnNlcnRNYW55LCBjb2xsKShyZXN1bHQsIG9wdGlvbnMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnKGBJbnNlcnQgY29tcGxldGVkLiBSZXN1bHQ6ICR7cn1gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxDb250ZXh0LmNvbXBsZXRlKHIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbENvbnRleHQuZmFpbChlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKF8uaXNQbGFpbk9iamVjdChyZXN1bHQpKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY29sbCA9IGNhbGxDb250ZXh0LmFjdGl2aXR5LmdldENvbGxlY3Rpb24odGhpcyk7XHJcbiAgICAgICAgICAgICAgICBsZXQgb3B0aW9ucyA9IHRoaXMuZ2V0T3B0aW9ucygpO1xyXG4gICAgICAgICAgICAgICAgZGVidWcoYEluc2VydGluZyBhIGRvY3VtZW50OiAke3Jlc3VsdH1gKTtcclxuICAgICAgICAgICAgICAgIGRlYnVnKGBPcHRpb25zOiAke29wdGlvbnN9YCk7XHJcbiAgICAgICAgICAgICAgICBwKGNvbGwuaW5zZXJ0T25lLCBjb2xsKShyZXN1bHQsIG9wdGlvbnMpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24ocikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1ZyhgSW5zZXJ0IGNvbXBsZXRlZC4gUmVzdWx0OiAke3J9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxDb250ZXh0LmNvbXBsZXRlKHIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbENvbnRleHQuZmFpbChlKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNhbGxDb250ZXh0LmZhaWwobmV3IEVycm9yKGBVbmtub3duIHR5cGUgb2YgZG9jdW1lbnRzIHByb3BlcnR5OiAke3R5cGVvZiByZXN1bHR9LmApKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBkZWJ1ZyhcIk5vIGRvY3VtZW50cywgZW5kaW5nLlwiKTtcclxuICAgICAgICBjYWxsQ29udGV4dC5lbmQocmVhc29uKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGNhbGxDb250ZXh0LmVuZChyZWFzb24sIHJlc3VsdCk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEluc2VydDsiXX0=
