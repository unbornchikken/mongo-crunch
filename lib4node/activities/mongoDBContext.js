"use strict";
"use strict";
var Activity = require("../../deps/workflow-4-node").activities.Activity;
var util = require("util");
var activityMarkup = require("../../deps/workflow-4-node").activities.activityMarkup;
var _ = require("lodash");
var fast = require("fast.js");
var Bluebird = require("bluebird");
var MongoClient = require("mongodb").MongoClient;
var StrMap = require("backpack-node").collections.StrMap;
var debug = require("debug")("mongo-crunch:Context");
function MongoDBContext() {
  Activity.call(this);
  this.connections = null;
  this.body = null;
}
util.inherits(MongoDBContext, Activity);
MongoDBContext.prototype.run = function(callContext, args) {
  var self = this;
  var body = self.get("body");
  var connections = self.get("connections");
  debug(("Running connections: " + connections + "."));
  if (!body) {
    debug("There is no body, context completed.");
    callContext.complete();
    return ;
  }
  function toConnectionsArray(conns) {
    function toConnection(conn) {
      if (_.isString(conn)) {
        conn = {
          name: "default",
          url: conn,
          options: null
        };
      } else if (_.isObject(conn)) {
        conn = {
          name: conn.name || "default",
          url: conn.url,
          options: conn.options
        };
      } else {
        throw new Error("Connection is invalid: " + JSON.stringify(conn));
      }
      if (_.isString(conn.url) && conn.url) {
        return conn;
      }
      throw new Error("Connection is invalid: " + JSON.stringify(conn));
    }
    var result = [];
    if (_.isArray(conns)) {
      fast.forEach(conns, function(c) {
        result.push(toConnection(c));
      });
    } else {
      result.push(toConnection(conns));
    }
    return result;
  }
  try {
    debug("Parsing connections.");
    var connsDef = toConnectionsArray(connections);
    debug(("There is " + connsDef.length + " connection(s) has been defined."));
    var processedConns = new StrMap();
    fast.forEach(connsDef, function(conn) {
      if (!processedConns.containsKey(conn.name)) {
        processedConns.add(conn.name, conn);
      } else {
        throw new Error("Duplicated connection \"" + conn.name + "\".");
      }
    });
    var tasks = [];
    processedConns.forEachValue(function(conn) {
      debug(("Creating Db for connection " + conn.url + ", options " + conn.options + "."));
      tasks.push(Bluebird.promisify(MongoClient.connect)(conn.url, conn.options).then(function(db) {
        debug("Db created.");
        conn.db = db;
      }));
    });
    Bluebird.all(tasks).then(function() {
      var newConns = {};
      self.set("connections", newConns);
      self.set("MongoDBContext_CollectionRecycleBin", {});
      self.set("MongoDBContext_OpenedCursors", []);
      self.set("MongoDBContext_SeenCollections", []);
      processedConns.forEach(function(kvp) {
        newConns[kvp.key] = kvp.value.db;
      });
      debug("Context has been initialized, scheduling body.");
      callContext.schedule(body, "_bodyCompleted");
    }, function(e) {
      callContext.fail(e);
    });
  } catch (e) {
    callContext.fail(e);
  }
};
MongoDBContext.prototype._bodyCompleted = function(callContext, reason, result) {
  var self = this;
  debug(("Context's body completed, reason: " + reason + "."));
  if (reason !== Activity.states.complete) {
    debug("Reason is not complete, resuming call context.");
    callContext.end(reason, result);
    return ;
  }
  Bluebird.coroutine($traceurRuntime.initGeneratorFunction(function $__0() {
    var taskError,
        MongoDBContext_CollectionRecycleBin,
        MongoDBContext_OpenedCursors,
        tasks,
        binVals,
        connections,
        closeTasks,
        e;
    return $traceurRuntime.createGeneratorInstance(function($ctx) {
      while (true)
        switch ($ctx.state) {
          case 0:
            taskError = null;
            debug("Doing final tasks.");
            $ctx.state = 36;
            break;
          case 36:
            $ctx.pushTry(24, 25);
            $ctx.state = 27;
            break;
          case 27:
            MongoDBContext_CollectionRecycleBin = self.get("MongoDBContext_CollectionRecycleBin");
            MongoDBContext_OpenedCursors = self.get("MongoDBContext_OpenedCursors");
            tasks = [];
            binVals = _.values(MongoDBContext_CollectionRecycleBin);
            debug(("Collections in recycle bin: " + binVals.length + "."));
            fast.forEach(binVals, function(coll) {
              debug(("Dropping collection: " + coll.collectionName));
              tasks.push(Bluebird.promisify(coll.drop, coll)().then(function() {
                debug(("Collection '" + coll.collectionName + "' dropped."));
              }).catch(function(e) {
                if (e.name === "MongoError" && e.message === "ns not found") {
                  debug(("Collection '" + coll.collectionName + "' doesn't exists."));
                  return ;
                }
                debug(("ERROR: Collection '" + coll.collectionName + "' dropping failed with\n" + e.stack));
              }));
            });
            debug(("Cursors to close: " + MongoDBContext_OpenedCursors.length + "."));
            fast.forEach(MongoDBContext_OpenedCursors, function(c, idx) {
              tasks.push(Bluebird.promisify(c.close, c)().then(function() {
                debug(("Cursor " + idx + ". dropped."));
              }).catch(function(e) {
                debug(("ERROR: Cursor " + idx + ". closing failed with\n" + e.stack));
              }));
            });
            $ctx.state = 6;
            break;
          case 6:
            $ctx.state = 2;
            return Bluebird.all(tasks);
          case 2:
            $ctx.maybeThrow();
            $ctx.state = 4;
            break;
          case 4:
            $ctx.popTry();
            $ctx.state = 25;
            $ctx.finallyFallThrough = -2;
            break;
          case 24:
            $ctx.popTry();
            $ctx.maybeUncatchable();
            e = $ctx.storedException;
            $ctx.state = 30;
            break;
          case 30:
            taskError = e;
            $ctx.state = 25;
            $ctx.finallyFallThrough = -2;
            break;
          case 25:
            $ctx.popTry();
            $ctx.state = 34;
            break;
          case 34:
            self.delete("MongoDBContext_CollectionRecycleBin");
            self.delete("MongoDBContext_OpenedCursors");
            self.delete("MongoDBContext_SeenCollections");
            connections = self.get("connections");
            debug(("Closing " + connections.length + " connections."));
            closeTasks = [];
            fast.forEach(_.values(connections), function(db) {
              debug(("Closing '" + db.databaseName + "'."));
              closeTasks.push(Bluebird.promisify(db.close, db)(true).then(function() {
                debug(("Db '" + db.databaseName + "' closed."));
              }).catch(function(e) {
                debug(("ERROR: Closing Db '" + db.databaseName + "' failed with\n" + e.stack));
              }));
            });
            $ctx.state = 21;
            break;
          case 21:
            $ctx.pushTry(11, null);
            $ctx.state = 14;
            break;
          case 14:
            $ctx.state = 8;
            return Bluebird.all(closeTasks);
          case 8:
            $ctx.maybeThrow();
            $ctx.state = 10;
            break;
          case 10:
            $ctx.popTry();
            $ctx.state = 16;
            break;
          case 11:
            $ctx.popTry();
            $ctx.maybeUncatchable();
            e = $ctx.storedException;
            $ctx.state = 17;
            break;
          case 17:
            debug("ERROR: Cannot close MongoDB connections, error\n" + e.stack);
            $ctx.state = 16;
            break;
          case 16:
            if (taskError) {
              debug("ERROR: final tasks failed. Reporting error to call context.");
              callContext.fail(taskError);
            } else {
              debug("Final tasks completed.");
              callContext.complete();
            }
            $ctx.state = 23;
            break;
          case 23:
            $ctx.state = $ctx.finallyFallThrough;
            break;
          default:
            return $ctx.end();
        }
    }, $__0, this);
  }))();
};
MongoDBContext.addCollectionToRecycleBin = function(scope, collection) {
  var bin = scope.get("MongoDBContext_CollectionRecycleBin");
  debug(("Adding collection '" + collection.collectionName + "' to recycle bin."));
  bin[collection.collectionName] = collection;
  debug(("Recycle bin size is " + _.keys(bin).length + "."));
};
MongoDBContext.registerOpenedCursor = function(scope, cursor) {
  var cursors = scope.get("MongoDBContext_OpenedCursors");
  debug("Registering a cursor as opened.");
  cursors.push(cursor);
  debug(("There are " + cursors.length + " cursors registered."));
};
MongoDBContext.unregisterOpenedCursor = function(scope, cursor) {
  debug("Unregistering opened cursor.");
  scope.set("MongoDBContext_OpenedCursors", _.without(scope.get("MongoDBContext_OpenedCursors"), cursor));
  debug(("There are " + scope.get("MongoDBContext_OpenedCursors").length + " cursors registered."));
};
MongoDBContext.isFirstSeenCollection = function(scope, db, collectionName) {
  debug(("Determining if '" + collectionName + "' collection in '" + db.databaseName + "' db is first seen by the current context."));
  var colls = scope.get("MongoDBContext_SeenCollections");
  var entry = _.first(_.where(colls, {db: db}));
  if (!entry) {
    var collReg = {};
    collReg[collectionName] = true;
    colls.push({
      db: db,
      collections: collReg
    });
    debug("Fist seen.");
    return true;
  }
  if (!entry.collections[collectionName]) {
    entry.collections[collectionName] = true;
    debug("First seen.");
    return true;
  }
  debug("Not first seen.");
  return false;
};
module.exports = MongoDBContext;
//# sourceMappingURL=data:application/json;base64,
