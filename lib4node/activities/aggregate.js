"use strict";
var CollectionOp = require('./collectionOp');
var util = require('util');
var Activity = require("../../deps/workflow-4-node").activities.Activity;
var _ = require('lodash');
var MongoDBContext = require('./mongoDBContext');
function Aggregate() {
  CollectionOp.call(this);
  this.pipeline = null;
  this.options = null;
  this.toArray = false;
}
util.inherits(Aggregate, CollectionOp);
Aggregate.prototype.doWork = function(callContext) {
  callContext.schedule(this.get('pipeline'), '_pipelineGot');
};
Aggregate.prototype._pipelineGot = function(callContext, reason, result) {
  if (result === Activity.states.complete) {
    if (_.isPlainObject(result) || _.isArray(result)) {
      var coll = callContext.activity.getCollection(this);
      var cursor = coll.aggregate(result, this.get("options"));
      if (this.get("toArray")) {
        cursor.toArray(function(err, result) {
          if (err) {
            callContext.fail(err);
          } else {
            callContext.complete(result);
          }
          cursor.close();
        });
      } else {
        MongoDBContext.registerOpenedCursor(this, cursor);
        callContext.complete(cursor);
      }
    } else {
      if (result)
        callContext.fail(new Error("Aggregation pipeline expected."));
      else
        callContext.fail(new Error("Invalid aggregation pipeline:" + JSON.stringify(result)));
    }
  } else {
    callContext.end(reason, result);
  }
};
module.exports = Aggregate;
//# sourceMappingURL=data:application/json;base64,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QUMsTUFBSyxDQUFHLE9BQUssQ0FBQyxDQUFDO0VBQ25DO0FBQUEsQUFDSixDQUFBO0FBRUEsS0FBSyxRQUFRLEVBQUksVUFBUSxDQUFDO0FBQzFCIiwiZmlsZSI6ImFjdGl2aXRpZXMvYWdncmVnYXRlLmpzIiwic291cmNlUm9vdCI6IkM6L0dJVC9tb25nby1jcnVuY2gvbGliLyIsInNvdXJjZXNDb250ZW50IjpbInZhciBDb2xsZWN0aW9uT3AgPSByZXF1aXJlKCcuL2NvbGxlY3Rpb25PcCcpO1xyXG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcclxudmFyIEFjdGl2aXR5ID0gcmVxdWlyZShcIi4uLy4uL2RlcHMvd29ya2Zsb3ctNC1ub2RlXCIpLmFjdGl2aXRpZXMuQWN0aXZpdHk7XHJcbnZhciBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XHJcbnZhciBNb25nb0RCQ29udGV4dCA9IHJlcXVpcmUoJy4vbW9uZ29EQkNvbnRleHQnKTtcclxuXHJcbmZ1bmN0aW9uIEFnZ3JlZ2F0ZSgpIHtcclxuICAgIENvbGxlY3Rpb25PcC5jYWxsKHRoaXMpO1xyXG4gICAgdGhpcy5waXBlbGluZSA9IG51bGw7XHJcbiAgICB0aGlzLm9wdGlvbnMgPSBudWxsO1xyXG4gICAgdGhpcy50b0FycmF5ID0gZmFsc2U7XHJcbn1cclxuXHJcbnV0aWwuaW5oZXJpdHMoQWdncmVnYXRlLCBDb2xsZWN0aW9uT3ApO1xyXG5cclxuQWdncmVnYXRlLnByb3RvdHlwZS5kb1dvcmsgPSBmdW5jdGlvbiAoY2FsbENvbnRleHQpIHtcclxuICAgIGNhbGxDb250ZXh0LnNjaGVkdWxlKHRoaXMuZ2V0KCdwaXBlbGluZScpLCAnX3BpcGVsaW5lR290Jyk7XHJcbn07XHJcblxyXG5BZ2dyZWdhdGUucHJvdG90eXBlLl9waXBlbGluZUdvdCA9IGZ1bmN0aW9uIChjYWxsQ29udGV4dCwgcmVhc29uLCByZXN1bHQpIHtcclxuICAgIGlmIChyZXN1bHQgPT09IEFjdGl2aXR5LnN0YXRlcy5jb21wbGV0ZSkge1xyXG4gICAgICAgaWYgKF8uaXNQbGFpbk9iamVjdChyZXN1bHQpIHx8IF8uaXNBcnJheShyZXN1bHQpKSB7XHJcbiAgICAgICAgICAgdmFyIGNvbGwgPSBjYWxsQ29udGV4dC5hY3Rpdml0eS5nZXRDb2xsZWN0aW9uKHRoaXMpO1xyXG4gICAgICAgICAgIHZhciBjdXJzb3IgPSBjb2xsLmFnZ3JlZ2F0ZShyZXN1bHQsIHRoaXMuZ2V0KFwib3B0aW9uc1wiKSk7XHJcbiAgICAgICAgICAgaWYgKHRoaXMuZ2V0KFwidG9BcnJheVwiKSkge1xyXG4gICAgICAgICAgICAgICBjdXJzb3IudG9BcnJheShmdW5jdGlvbihlcnIsIHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIGNhbGxDb250ZXh0LmZhaWwoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIGNhbGxDb250ZXh0LmNvbXBsZXRlKHJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICBjdXJzb3IuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICBNb25nb0RCQ29udGV4dC5yZWdpc3Rlck9wZW5lZEN1cnNvcih0aGlzLCBjdXJzb3IpO1xyXG4gICAgICAgICAgICAgICBjYWxsQ29udGV4dC5jb21wbGV0ZShjdXJzb3IpO1xyXG4gICAgICAgICAgIH1cclxuICAgICAgIH1cclxuICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgIGlmIChyZXN1bHQpXHJcbiAgICAgICAgICAgIGNhbGxDb250ZXh0LmZhaWwobmV3IEVycm9yKFwiQWdncmVnYXRpb24gcGlwZWxpbmUgZXhwZWN0ZWQuXCIpKTtcclxuICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgIGNhbGxDb250ZXh0LmZhaWwobmV3IEVycm9yKFwiSW52YWxpZCBhZ2dyZWdhdGlvbiBwaXBlbGluZTpcIiArIEpTT04uc3RyaW5naWZ5KHJlc3VsdCkpKTtcclxuICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGNhbGxDb250ZXh0LmVuZChyZWFzb24sIHJlc3VsdCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gQWdncmVnYXRlO1xyXG4iXX0=
