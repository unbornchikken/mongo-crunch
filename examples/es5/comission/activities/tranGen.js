"use strict";
"use strict";
var es = "es6";
try {
  eval("(function *(){})");
} catch (err) {
  es = "es5";
}
var util = require("util");
var wf4node = require("workflow-4-node");
var Composite = wf4node.activities.Composite;
var path = require("path");
var _ = require("lodash");
function TranGen() {
  Composite.call(this);
  this.collection = null;
  this.size = 1000;
}
util.inherits(TranGen, Composite);
TranGen.prototype.createImplementation = function() {
  return {
    "@require": path.join(__dirname, "../../../../lib/" + es + "/activities"),
    "@block": {
      coll: "= collection",
      args: [{"@for": {
          from: 0,
          to: "= size",
          args: {"@insert": {
              collection: "= coll",
              documents: function() {
                var doc = {
                  _id: this.get("i"),
                  createdAt: new Date()
                };
                function key(num) {
                  num = '' + num;
                  return num.length === 1 ? "0" + num : num;
                }
                var numOfID = 9;
                var maxID = 1000;
                for (var i = 0; i < numOfID; i++) {
                  doc[("itemID" + key(i))] = _.random(1, 10) * 100;
                }
                var numOfChars = 40;
                function genProdCode(i) {
                  var start = "A".charCodeAt(0);
                  var len = (i % 3) + 2;
                  var result = "";
                  for (var x = 0; x < len; x++) {
                    result += String.fromCharCode(start + _.random(0, len - 1));
                  }
                  return result;
                }
                for (var i$__0 = 0; i$__0 < numOfChars; i$__0++) {
                  doc[("prodCode" + key(i$__0))] = genProdCode(i$__0);
                }
                var numOfNumbers = 30;
                var maxNum = 1000000;
                for (var i$__1 = 0; i$__1 < numOfNumbers; i$__1++) {
                  doc[("number" + key(i$__1))] = (maxNum / 2 + (Math.random() * maxNum / 2)) * ((i$__1 + 1) / 30);
                }
                var numOfDates = 20;
                var minDate = new Date(2010, 1, 1);
                var maxDate = new Date(2014, 12, 31);
                var genDate = function() {
                  return new Date(minDate.getTime() + Math.random() * (maxDate.getTime() - minDate.getTime()));
                };
                for (var i$__2 = 0; i$__2 < numOfDates; i$__2++) {
                  doc[("date" + key(i$__2))] = genDate();
                }
                return doc;
              }
            }}
        }}]
    }
  };
};
module.exports = TranGen;
//# sourceMappingURL=data:application/json;base64,
